<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="spem2Complete" nsURI="http://schema.omg.org/spec/SPEM/2.0/spem.xml"
    nsPrefix="spem">
  <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
    <details key="originalName" value="SPEM2-Complete"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
    <details key="documentation" value="The Core meta-model package contains that meta-model classes and abstractions that build the fundament for all other meta-model packages.  In other words, all the common classes amongst all compliance levels defining the core of SPEM 2.0 have been place here.  Core mainly defines classes for two SPEM 2.0 capabilities:  (1) The ability for a SPEM 2.0 user to create user-defined qualifications for a SPEM 2.0 classes allowing users to distinguish different 'kinds' SPEM 2.0 class instances. (2) A set of abstract classes to define work expressed as SPEM 2.0 processes.  All SPEM 2.0 classes that derive from these classes are intended to map to behavior classes of behavior models (e.g. can be assigned as stereotypes to UML 2.0 Activities or linked to behaviored classifiers).&#xD;&#xA;&#xD;&#xA;This package defines the base for all process models.  It supports the creation of simple and flexible process models.  Its core data structure is a breakdown or decomposition of nested Activities that maintain lists of references to performing Role classes as well as input and output Work Product classes for each Activity.  In addition it provides mechanism for process reuse such as the dynamic binding of process patterns that allow users assembling processes with sets of dynamically linked Activities.  These structures are used to represent high-level and basic processes that are not textually documented and ideal for the ad-hoc assembly of processes especially the representation of agile processes and self-organizing team approaches.&#xD;&#xA;Development processes are in many cases not only represented as models, but documented and managed as natural language descriptions.  For many software development approaches and methods human consumable documentation providing understandable guidance for best development practices is more important than precise models.  In other words, the practicality of techniques and methods expressed with these practices is in many cases perceived to provide higher value than strict obedience to a formally defined process.  The reasons for this are that many development approaches see software development rather as a creative process that requires constant reevaluation and adoption than a strict sequence of activities.  For example, for modern agile development teams, best practices of software development are communicated through mentoring and short practice descriptions in white paper format, rather than formally defined models.  They assume certain values and a development culture that cannot be formalized with models, but can only be captured in natural language documentation. The Managed Content meta-model package introduced concepts for managing the textual content of such descriptions.  These concepts can either be used standalone or in combination with process structure concepts.  For example, a SPEM 2.0 based process could be solely comprised of a set of instances of the guidance meta-class defining development best practices in whitepaper format. It could also be comprised of a combination of these guidance elements with a process structure using relationships defined in the Managed Content meta-model package that allows associating guidance elements with process structure elements.&#xD;&#xA;The Method Content meta-model package provides the concepts for SPEM 2.0 users and organization to build up a development knowledgebase that is independent of any specific processes and development projects.  It adds concepts for defining lifecycle and process-independent reusable method content elements that provide a base of documented knowledge of software development methods, techniques, and concrete realizations of best practices.  Method Content comprises of textual step-by-step explanations, describing how specific fine-granular development goals are achieved by which roles with which resources and results, independent of the placement of these steps within a specific development lifecycle. Processes would reuse these method content elements and relate them into semi-ordered sequences that are customized to specific types of projects.  A SPEM 2.0 user can define Method Content as general guidance and build up a knowledge base of development methods without ever creating a process, but adding a little bit more structure for her content as provided by the generic meta-classes defined in the Managed Content package.  These structures selected for the Method Content package have been derived from best practices in the industry.  Development processes can be based on reusable method content (as defined in the Process with Methods meta-model package), but they can also be independent of method content (by just using the Process Structure meta-model package) defining ad-hoc processes that are not based on such reusable methods.&#xD;&#xA;The Process with Methods meta-model package defines new and redefines existing structures for integrating processes defined with the concepts from the Process Structure meta-model package with instances of concepts from the Method Content meta-model package.  Whereas Method Content defines fundamental methods and techniques for software development, processes place these methods and techniques into the context of a lifecycle model comprising, for example, of phases and milestones.  When applying method content such as Tasks, Roles, and Work Products to specific parts of the process reference classes (referred to as Method Content Use in this specification) are created that can store individual changes to their referenced Method Content classes expressing how and which parts of the method will be applied in that particular point in the process.&#xD;&#xA;The Method Plug-in meta-model package introduces concepts for 'designing' and managing maintainable, large scale, reusable, and configurable libraries or repositories of method content and processes.   The concepts introduced in this package allow arranging different parts of such a library based on different layers of concern similar to layered software architectures.  With concepts such as Method Plug-in, Process Component, and Variability one can define processes that are granularly extended with more and more capabilities.  Users can then select the process capabilities they are interested in by defining so-called method configurations.  Only those selected capabilities will then be surfaced within these configurations to the end-user allowing process authors to define consistent and maintainable processes for different audiences that are configurable for specific end-user needs.&#xD;&#xA;The concepts of the Process Structure package represent a process as a static breakdown structure allowing nesting of activities and defining predecessor dependencies amongst them.  The Process Behavior meta-model package allows extending these structures with behavioral models. However, it does not define it own behavior modeling approach, but rather provides 'links' to existing externally defined behavior models enabling reuse of these approaches from other OMG or third party specifications.  For example, a process defined with the Process Structure concepts can be linked to UML 2 Activity diagrams that represent the behavior of such process.  Such process models can utilize the SPEM UML 2 Profile for a consistent presentation for such UML 2 models in addition to the 'links' defined in this Process Behavior meta-model package."/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Classifier" abstract="true" eSuperTypes="#//Namespace #//Type">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers."/>
    </eAnnotations>
    <eOperations name="noCyclesInGeneralization" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="no_cycles_in_generalization"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="not self.allParents()->includes(self)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="specializeType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="specialize_type"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.parents()->forAll(c | self.maySpecializeType(c))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A classifier may only specialize classifiers of a valid type."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="conformsTo" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations."/>
      </eAnnotations>
      <eAnnotations source="redefines" references="#//Type/conformsTo"/>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self=other) or (self.allParents()->includes(other)"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Classifier"/>
    </eOperations>
    <eOperations name="allFeatures" ordered="false" upperBound="-1" eType="#//Feature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="member->select(oclIsKindOf(Feature))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="general" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The general classifiers are the classifiers referenced by the generalization relationships."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.parents()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="parents" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query parents() gives all of the immediate ancestors of a generalized Classifier."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="generalization.general"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="inheritedMember" ordered="false" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The inheritedMember association is derived by inheriting the inheritable members of the parents."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.inherit(self.parents()->collect(p | p.inheritableMembers(self))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="allParents" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.parents()->union(self.parents()->collect(p | p.allParents())"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="inheritableMembers" ordered="false" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="member->select(m | c.hasVisibilityOf(m))"/>
      </eAnnotations>
      <eParameters name="c" ordered="false" lowerBound="1" eType="#//Classifier"/>
    </eOperations>
    <eOperations name="hasVisibilityOf" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if (self.inheritedMember->includes(n)) then (n.visibility &lt;> #private) else true"/>
      </eAnnotations>
      <eParameters name="n" ordered="false" lowerBound="1" eType="#//NamedElement"/>
    </eOperations>
    <eOperations name="inherit" ordered="false" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The inherit operation is overridden to exclude redefined properties."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="inhs"/>
      </eAnnotations>
      <eParameters name="inhs" ordered="false" upperBound="-1" eType="#//NamedElement"/>
    </eOperations>
    <eOperations name="maySpecializeType" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.oclIsKindOf(c.oclType)"/>
      </eAnnotations>
      <eParameters name="c" ordered="false" lowerBound="1" eType="#//Classifier"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="feature" ordered="false"
        upperBound="-1" eType="#//Feature" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Feature/featuringClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" ordered="false"
        upperBound="-1" eType="#//Property" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Classifier/feature"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="general" ordered="false"
        upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the general classifier in the Generalization relationship."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inheritedMember" ordered="false"
        upperBound="-1" eType="#//NamedElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies all elements inherited by this classifier from the general classifiers."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Namespace" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A namespace is an element in a model that contains a set of named elements that can be identified by name."/>
    </eAnnotations>
    <eOperations name="membersDistinguishable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="members_distinguishable"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="membersAreDistinguishable()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="All the members of a Namespace are distinguishable within it."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="importedMember" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getNamesOfMember" ordered="false" upperBound="-1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if self.ownedMember->includes(element)&#xA;then Set{}->include(element.name)&#xA;else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in&#xA;  if elementImports->notEmpty()&#xA;  then elementImports->collect(el | el.getName())&#xA;  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))->collect(pi | pi.importedPackage.getNamesOfMember(element))&#xA;  endif&#xA;endif"/>
      </eAnnotations>
      <eParameters name="element" ordered="false" lowerBound="1" eType="#//NamedElement"/>
    </eOperations>
    <eOperations name="importMembers" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | mem.imp.isDistinguishableFrom(mem, self)))"/>
      </eAnnotations>
      <eParameters name="imps" ordered="false" upperBound="-1" eType="#//PackageableElement"/>
    </eOperations>
    <eOperations name="excludeCollisions" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))"/>
      </eAnnotations>
      <eParameters name="imps" ordered="false" upperBound="-1" eType="#//PackageableElement"/>
    </eOperations>
    <eOperations name="membersAreDistinguishable" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.member->forAll( memb |&#xA;&#x9;self.member->excluding(memb)->forAll(other |&#xA;&#x9;&#x9;memb.isDistinguishableFrom(other, self)))"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedMember" ordered="false"
        upperBound="-1" eType="#//NamedElement" changeable="false" volatile="true"
        transient="true" derived="true" eOpposite="#//NamedElement/namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A collection of NamedElements owned by the Namespace."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Namespace/member #//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRule" ordered="false"
        upperBound="-1" eType="#//Constraint" containment="true" eOpposite="#//Constraint/context">
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="elementImport" ordered="false"
        upperBound="-1" eType="#//ElementImport" containment="true" eOpposite="#//ElementImport/importingNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the ElementImports owned by the Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageImport" ordered="false"
        upperBound="-1" eType="#//PackageImport" containment="true" eOpposite="#//PackageImport/importingNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the PackageImports owned by the Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importedMember" ordered="false"
        upperBound="-1" eType="#//PackageableElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" ordered="false"
        upperBound="-1" eType="#//NamedElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A named element is an element in a model that may have a name."/>
    </eAnnotations>
    <eOperations name="hasNoQualifiedName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="has_no_qualified_name"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())&#xD;&#xA;  implies self.qualifiedName->isEmpty()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If there is no name, or one of the containing namespaces has no name, there is no qualified name."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="hasQualifiedName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="has_qualified_name"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies&#xA;  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="visibilityNeedsOwnership" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="visibility_needs_ownership"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="namespace->isEmpty() implies visibility->isEmpty()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If a NamedElement is not owned by a Namespace, it does not have a visibility."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="allNamespaces" upperBound="-1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if self.namespace->isEmpty()&#xA;then Sequence{}&#xA;else self.namespace.allNamespaces()->prepend(self.namespace)&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isDistinguishableFrom" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)&#xA;then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()&#xA;else true&#xA;endif"/>
      </eAnnotations>
      <eParameters name="n" ordered="false" lowerBound="1" eType="#//NamedElement"/>
      <eParameters name="ns" ordered="false" lowerBound="1" eType="#//Namespace"/>
    </eOperations>
    <eOperations name="separator" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query separator() gives the string that is used to separate names when constructing a qualified name."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="'::'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="qualifiedName" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()&#xA;then &#xA;    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))&#xA;else&#xA;    Set{}&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="allOwningPackages" ordered="false" upperBound="-1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allOwningPackages() returns all the directly or indirectly owning packages."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" ordered="false" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The name of the NamedElement."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" ordered="false"
        eType="#//VisibilityKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" ordered="false"
        eType="#//Namespace" changeable="false" volatile="true" transient="true" derived="true"
        eOpposite="#//Namespace/ownedMember">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the namespace that owns the NamedElement."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Element/owner"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" ordered="false"
        eType="#//String" changeable="false" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An element is a constituent of a model. As such, it has the capability of owning other elements."/>
    </eAnnotations>
    <eOperations name="notOwnSelf" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="not_own_self"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="not self.allOwnedElements()->includes(self)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element may not directly or indirectly own itself."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="hasOwner" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="has_owner"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.mustBeOwned() implies owner->notEmpty()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Elements that must be owned must have an owner."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="allOwnedElements" ordered="false" upperBound="-1" eType="#//Element">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allOwnedElements() gives all of the direct and indirect owned elements of an element."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="mustBeOwned" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="true"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedElement" ordered="false"
        upperBound="-1" eType="#//Element" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Element/owner">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Elements owned by this element."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owner" ordered="false"
        eType="#//Element" changeable="false" volatile="true" transient="true" derived="true"
        eOpposite="#//Element/ownedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Element that owns this element."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedComment" ordered="false"
        upperBound="-1" eType="#//Comment" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Comments owned by this element."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Comment" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A comment is a textual annotation that can be attached to a set of elements."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" ordered="false" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a string that is the comment."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="annotatedElement" ordered="false"
        upperBound="-1" eType="#//Element">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Element(s) being commented."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="String">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="Boolean">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Boolean type is used for logical expression, consisting of the predefined values true and false."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="VisibilityKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model."/>
    </eAnnotations>
    <eLiterals name="public">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A public element is visible to all elements that can access the contents of the namespace that owns it."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="private" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A private element is only visible inside the namespace that owns it."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="protected" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A protected element is visible to elements that have a generalization relationship to the namespace that owns it."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="package" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="#//Namespace #//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A package is used to group elements, and provides a namespace for the grouped elements.&#xD;&#xA;A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="mustBeOwned" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query mustBeOwned() indicates whether elements of this type must have an owner."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Element/mustBeOwned"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="false"/>
        </eAnnotations>
      </contents>
    </eAnnotations>
    <eOperations name="elementsPublicOrPrivate" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="elements_public_or_private"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If an element that is owned by a package has visibility, it is public or private."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="visibleMembers" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query visibleMembers() defines which members of a Package can be accessed outside it."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="member->select( m | self.makesVisible(m))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="makesVisible" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="ownedMember->includes(el)) or&#xA;   (elementImport->&#xA;      select(ei|ei.visibility = #public)->&#xA;         collect(ei|ei.importedElement)->includes(el)) or&#xA;   (packageImport->&#xA;      select(pi|pi.visibility = #public)->&#xA;        collect(pi|&#xA;           pi.importedPackage.member->includes(el))->notEmpty()"/>
      </eAnnotations>
      <eParameters name="el" ordered="false" lowerBound="1" eType="#//NamedElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packagedElement" ordered="false"
        upperBound="-1" eType="#//PackageableElement" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the packageable elements that are owned by this Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedType" ordered="false"
        upperBound="-1" eType="#//Type" volatile="true" transient="true" derived="true"
        eOpposite="#//Type/package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the packaged elements that are Types."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Package/packagedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" ordered="false"
        upperBound="-1" eType="#//Package" volatile="true" transient="true" derived="true"
        eOpposite="#//Package/nestingPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the packaged elements that are Packages."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Package/packagedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" ordered="false"
        eType="#//Package" volatile="true" transient="true" derived="true" eOpposite="#//Package/nestedPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Package that owns this Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageMerge" ordered="false"
        upperBound="-1" eType="#//PackageMerge" containment="true" eOpposite="#//PackageMerge/receivingPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the PackageMerges that are owned by this Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="profileApplication" ordered="false"
        upperBound="-1" eType="#//ProfileApplication" containment="true" eOpposite="#//ProfileApplication/applyingPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the ProfileApplications that indicate which profiles have been applied to the Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageableElement" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A packageable element indicates a named element that may be owned directly by a package."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A type is a named element that is used as the type for a typed element. A type can be contained in a package."/>
    </eAnnotations>
    <eOperations name="conformsTo" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="false"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Type"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="package" ordered="false"
        eType="#//Package" volatile="true" transient="true" derived="true" eOpposite="#//Package/ownedType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the owning package of this classifier, if any."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageMerge" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A package merge defines how the contents of one package are extended by the contents of another package."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mergedPackage" ordered="false"
        lowerBound="1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Package that is to be merged with the receiving package of the PackageMerge."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="receivingPackage" ordered="false"
        lowerBound="1" eType="#//Package" eOpposite="#//Package/packageMerge">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Package that is being extended with the contents of the merged package of the PackageMerge."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DirectedRelationship" abstract="true"
      eSuperTypes="#//Relationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the sources of the DirectedRelationship."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Relationship/relatedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the targets of the DirectedRelationship."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Relationship/relatedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Relationship" abstract="true" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Relationship is an abstract concept that specifies some kind of relationship between elements."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="relatedElement" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the elements related by the Relationship."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProfileApplication" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A profile application is used to show which profiles have been applied to a package."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="appliedProfile" ordered="false"
        lowerBound="1" eType="#//Profile">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Profiles that are applied to a Package through this ProfileApplication."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isStrict" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="applyingPackage" ordered="false"
        lowerBound="1" eType="#//Package" eOpposite="#//Package/profileApplication">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package that owns the profile application."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Profile" eSuperTypes="#//Package">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain."/>
    </eAnnotations>
    <eOperations name="metaclassReferenceNotSpecialized" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="metaclass_reference_not_specialized"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.metaclassReference.importedElement->&#xD;&#xA;  select(c | c.oclIsKindOf(Classifier) and&#xD;&#xA;    (c.generalization.namespace = self or&#xD;&#xA;      (c.specialization.namespace = self) )->isEmpty()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element imported as a metaclassReference is not specialized or generalized in a Profile."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="referencesSameMetamodel" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="references_same_metamodel"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages())->&#xD;&#xA;  union(self.metaclassReference.importedElement.allOwningPackages() )->notEmpty()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedStereotype" ordered="false"
        upperBound="-1" eType="#//Stereotype" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Stereotypes that are owned by the Profile."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Package/packagedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaclassReference" ordered="false"
        upperBound="-1" eType="#//ElementImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References a metaclass that may be extended."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/elementImport"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metamodelReference" ordered="false"
        upperBound="-1" eType="#//PackageImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References a package containing (directly or indirectly) metaclasses that may be extended."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/packageImport"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Stereotype" eSuperTypes="#//Class">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass."/>
    </eAnnotations>
    <eOperations name="nameNotClash" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="name_not_clash"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="true"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Stereotype names should not clash with keyword names for the extended model element."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="generalize" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="generalization.general->forAll(e |e.oclIsKindOf(Stereotype)) and generalization.specific->forAll(e | e.oclIsKindOf(Stereotype)) "/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Stereotype may only generalize or specialize another Stereotype."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="icon" ordered="false" upperBound="-1"
        eType="#//Image" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A class describes a set of objects that share the same specifications of features, constraints, and semantics.&#xD;&#xA;Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="inherit" ordered="false" upperBound="-1"
          eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The inherit operation is overridden to exclude redefined properties."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Classifier/inherit"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))"/>
        </eAnnotations>
        <eParameters name="inhs" ordered="false" upperBound="-1" eType="#//NamedElement"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="True when a class is abstract."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/class">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The attributes (i.e. the properties) owned by the class."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Classifier/attribute #//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1"
        eType="#//Operation" containment="true" eOpposite="#//Operation/class">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The operations owned by the class."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Classifier/feature #//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" ordered="false"
        upperBound="-1" eType="#//Class">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This gives the superclasses of a class."/>
      </eAnnotations>
      <eAnnotations source="redefines" references="#//Classifier/general.1"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="extension" ordered="false"
        upperBound="-1" eType="#//Extension" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Extension/metaclass.1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Extensions that specify additional properties of the metaclass. The property is derived from the extensions whose memberEnds are typed by the Class."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="#//StructuralFeature">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="isConsistentWith" ordered="false"
          lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//RedefinableElement/isConsistentWith"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="redefinee.oclIsKindOf(Property) and &#xA;  let prop : Property = redefinee.oclAsType(Property) in &#xA;  (prop.type.conformsTo(self.type) and &#xA;  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and &#xA;  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() &lt;= self.lowerBound()) and &#xA;  (self.isDerived implies prop.isDerived) and&#xA;  (self.isComposite implies prop.isComposite))"/>
        </eAnnotations>
        <eParameters name="redefinee" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
      </contents>
    </eAnnotations>
    <eOperations name="multiplicityOfComposite" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="multiplicity_of_composite"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="isComposite implies (upperBound()->isEmpty() or upperBound() &lt;= 1)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A multiplicity of a composite aggregation must not have an upper bound greater than 1."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subsettingContextConforms" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="subsetting_context_conforms"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.subsettedProperty->notEmpty() implies&#xA;  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |&#xA;    self.subsettedProperty->forAll(sp |&#xA;      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="redefinedPropertyInherited" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="redefined_property_inherited"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if (redefinedProperty->notEmpty()) then&#xA;  (redefinitionContext->notEmpty() and&#xA;      redefinedProperty->forAll(rp|&#xA;        ((redefinitionContext->collect(fc|&#xA;          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A redefined property must be inherited from a more general classifier containing the redefining property."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subsettingRules" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="subsetting_rules"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.subsettedProperty->forAll(sp |&#xA;  self.type.conformsTo(sp.type) and&#xA;    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies&#xA;      self.upperBound()&lt;=sp.upperBound() ))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="navigableReadonly" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="navigable_readonly"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="isReadOnly implies isNavigable()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Only a navigable property can be marked as readOnly."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="derivedUnionIsDerived" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="derived_union_is_derived"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="isDerivedUnion implies isDerived"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A derived union is derived."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subsettedPropertyNames" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="subsetted_property_names"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="true"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A property may not subset a property with the same name."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="opposite" ordered="false" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if owningAssociation->isEmpty() and association.memberEnd->size() = 2&#xA;  then&#xA;    let otherEnd = (association.memberEnd - self)->any() in&#xA;      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif&#xA;    else Set {}&#xA;    endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="subsettingContext" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if association->notEmpty()&#xA;then association.endType-type &#xA;else if classifier->notEmpty then Set{classifier} else Set{} endif&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isNavigable" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isNavigable() indicates whether it is possible to navigate across the property."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="not classifier->isEmpty() or&#xA;association.owningAssociation.navigableOwnedEnd->includes(self)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isAttribute" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isAttribute() is true if the Property is defined as an attribute of some classifier."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="Classifier->allInstances->exists(c | c.attribute->includes(p))"/>
      </eAnnotations>
      <eParameters name="p" ordered="false" lowerBound="1" eType="#//Property"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If isReadOnly is true, the attribute may not be written to after initialization."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" ordered="false"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a String that represents a value to be used when no argument is supplied for the Property."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If isDerived is true, the value of the attribute is derived from information elsewhere."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerivedUnion" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies whether the property is derived as the union of all of the properties that are constrained to subset it."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningAssociation" ordered="false"
        eType="#//Association" eOpposite="#//Association/ownedEnd">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the owning association of this property, if any."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Property/association #//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="association" ordered="false"
        eType="#//Association" eOpposite="#//Association/memberEnd">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the association of which this property is a member, if any."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinedProperty" ordered="false"
        upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the properties that are redefined by this property."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//RedefinableElement/redefinedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subsettedProperty" ordered="false"
        upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the properties of which this property is constrained to be a subset."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" ordered="false"
        eType="#//Property" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="datatype" ordered="false"
        eType="#//DataType" eOpposite="#//DataType/ownedAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The DataType that owns this Property."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="class" ordered="false"
        eType="#//Class" eOpposite="#//Class/ownedAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Class that owns the Property."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeature" abstract="true" eSuperTypes="#//Feature #//TypedElement #//MultiplicityElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Feature" abstract="true" eSuperTypes="#//RedefinableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A feature declares a behavioral or structural characteristic of instances of classifiers."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="featuringClassifier" ordered="false"
        upperBound="-1" eType="#//Classifier" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Classifier/feature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Classifiers that have this Feature as a feature."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RedefinableElement" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier."/>
    </eAnnotations>
    <eOperations name="redefinitionContextValid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="redefinition_context_valid"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="redefinitionConsistent" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="redefinition_consistent"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.redefinedElement->forAll(re | re.isConsistentWith(self))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A redefining element must be consistent with each redefined element."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="isConsistentWith" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="false"/>
      </eAnnotations>
      <eParameters name="redefinee" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
    </eOperations>
    <eOperations name="isRedefinitionContextValid" ordered="false" lowerBound="1"
        eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.redefinitionContext->exists(c | redefined.redefinitionContext->exists(r | c.allParents()->includes(r)))"/>
      </eAnnotations>
      <eParameters name="redefined" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinitionContext" ordered="false"
        upperBound="-1" eType="#//Classifier" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the contexts that this element may be redefined from."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinedElement" ordered="false"
        upperBound="-1" eType="#//RedefinableElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The redefinable element that is being redefined by this element."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A typed element is a kind of named element that represents an element with a type."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" abstract="true"
      eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element."/>
    </eAnnotations>
    <eOperations name="upperGt0" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="upper_gt_0"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="upperBound()->notEmpty() implies upperBound() > 0"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A multiplicity must define at least one valid cardinality that is greater than zero."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="upperGeLower" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="upper_ge_lower"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The upper bound must be greater than or equal to the lower bound."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="lowerGe0" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="lower_ge_0"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="lowerBound()->notEmpty() implies lowerBound() >= 0"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The lower bound must be a non-negative integer literal."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="isMultivalued" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isMultivalued() checks whether this multiplicity has an upper bound greater than one."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="upperBound() > 1"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="includesMultiplicity" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() >= M.upperBound()"/>
      </eAnnotations>
      <eParameters name="m" ordered="false" lowerBound="1" eType="#//MultiplicityElement">
        <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details key="originalName" value="M"/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="includesCardinality" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="lowerBound() &lt;= C) and (upperBound() >= C"/>
      </eAnnotations>
      <eParameters name="c" ordered="false" lowerBound="1" eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details key="originalName" value="C"/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="lowerBound" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query lowerBound() returns the lower bound of the multiplicity as an integer."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if lower->notEmpty() then lower else 1 endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="upperBound" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if upper->notEmpty() then upper else 1 endif"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" ordered="false"
        eType="#//Integer" defaultValueLiteral="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the lower bound of the multiplicity interval."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" ordered="false"
        eType="#//UnlimitedNatural" defaultValueLiteral="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the upper bound of the multiplicity interval."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="Integer">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An integer is a primitive type representing integer values."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="UnlimitedNatural">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An unlimited natural is a primitive type representing unlimited natural values."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Association" eSuperTypes="#//Classifier #//Relationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link."/>
    </eAnnotations>
    <eOperations name="associationEnds" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="association_ends"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Association ends of associations with more than two ends must be owned by the association."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies whether the association is derived from other model elements such as other associations or constraints."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="endType" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Type" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the classifiers that are used as types of the ends of the association."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Relationship/relatedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="memberEnd" lowerBound="2"
        upperBound="-1" eType="#//Property" eOpposite="#//Property/association">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Each end represents participation of instances of the classifier connected to the end in links of the association."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="navigableOwnedEnd" ordered="false"
        upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The navigable ends that are owned by the association itself."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Association/ownedEnd"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedEnd" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/owningAssociation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The ends that are owned by the association itself."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Association/memberEnd #//Classifier/feature #//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="inherit" ordered="false" upperBound="-1"
          eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The inherit operation is overridden to exclude redefined properties."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Classifier/inherit"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))"/>
        </eAnnotations>
        <eParameters name="inhs" ordered="false" upperBound="-1" eType="#//NamedElement"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1"
        eType="#//Operation" containment="true" eOpposite="#//Operation/datatype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Operations owned by the DataType."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Classifier/feature #//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/datatype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Attributes owned by the DataType."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Classifier/attribute #//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//BehavioralFeature">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="isConsistentWith" ordered="false"
          lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//RedefinableElement/isConsistentWith"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="redefinee.oclIsKindOf(Operation) and&#xA;    let op: Operation = redefinee.oclAsType(Operation) in&#xA;        self.formalParameter.size() = op.formalParameter.size() and&#xA;        self.returnResult.size() = op.returnResult.size() and&#xA;        forAll(i | op.formalParameter[i].type.conformsTo(self.formalParameter[i].type)) and&#xA;        forAll(i | op.returnResult[i].type.conformsTo(self.returnResult[i].type))"/>
        </eAnnotations>
        <eParameters name="redefinee" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1"
          eType="#//Parameter" containment="true" eOpposite="#//Parameter/operation">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Specifies the ordered set of formal parameters of this BehavioralFeature."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//BehavioralFeature/ownedParameter"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="raisedException" ordered="false"
          upperBound="-1" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="References the Types representing exceptions that may be raised during an invocation of this operation."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//BehavioralFeature/raisedException"/>
      </contents>
    </eAnnotations>
    <eOperations name="onlyBodyForQuery" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="only_body_for_query"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="bodyCondition->notEmpty() implies isQuery"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A bodyCondition can only be specified for a query operation."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="atMostOneReturn" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="at_most_one_return"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.ownedParameter->select(par | par.direction = #return)->size() &lt;= 1"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="isOrdered" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if returnResult->size() = 1 then returnResult->any().isOrdered else false endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isUnique" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if returnResult->size() = 1 then returnResult->any().isUnique else true endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="lower" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if returnResult->size() = 1 then returnResult->any().lower else Set{} endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="upper" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if returnResult->size() = 1 then returnResult->any().upper else Set{} endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="type" ordered="false" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if returnResult->size() = 1 then returnResult->any().type else Set{} endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="returnResult" ordered="false" upperBound="-1" eType="#//Parameter">
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="ownedParameter->select (par | par.direction = #return)"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isQuery" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" ordered="false"
        lowerBound="1" eType="#//Boolean" volatile="true" transient="true" defaultValueLiteral="false"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" ordered="false"
        lowerBound="1" eType="#//Boolean" volatile="true" transient="true" defaultValueLiteral="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" ordered="false"
        eType="#//Integer" volatile="true" transient="true" defaultValueLiteral="1"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" ordered="false"
        eType="#//UnlimitedNatural" volatile="true" transient="true" defaultValueLiteral="1"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="class" ordered="false"
        eType="#//Class" eOpposite="#//Class/ownedOperation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The class that owns the operation."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//RedefinableElement/redefinitionContext #//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinedOperation" ordered="false"
        upperBound="-1" eType="#//Operation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Operations that are redefined by this Operation."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//RedefinableElement/redefinedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" eType="#//Type"
        volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="precondition" ordered="false"
        upperBound="-1" eType="#//Constraint">
      <eAnnotations source="subsets" references="#//Namespace/ownedRule"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="postcondition" ordered="false"
        upperBound="-1" eType="#//Constraint">
      <eAnnotations source="subsets" references="#//Namespace/ownedRule"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bodyCondition" ordered="false"
        eType="#//Constraint">
      <eAnnotations source="subsets" references="#//Namespace/ownedRule"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="datatype" ordered="false"
        eType="#//DataType" eOpposite="#//DataType/ownedOperation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The DataType that owns this Operation."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//RedefinableElement/redefinitionContext #//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BehavioralFeature" abstract="true" eSuperTypes="#//Namespace #//Feature">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="isDistinguishableFrom" ordered="false"
          lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//NamedElement/isDistinguishableFrom"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="if n.oclIsKindOf(BehavioralFeature)&#xA;then&#xA;  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()&#xA;  then Set{}->include(self)->include(n)->isUnique( bf | bf.parameter->collect(type))&#xA;  else true&#xA;  endif&#xA;else true&#xA;endif"/>
        </eAnnotations>
        <eParameters name="n" ordered="false" lowerBound="1" eType="#//NamedElement"/>
        <eParameters name="ns" ordered="false" lowerBound="1" eType="#//Namespace"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1"
        eType="#//Parameter" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the ordered set of formal parameters of this BehavioralFeature."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" ordered="false"
        upperBound="-1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Types representing exceptions that may be raised during an invocation of this feature."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//TypedElement #//MultiplicityElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" ordered="false"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a String that represents a value to be used when no argument is supplied for the Parameter."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="direction" ordered="false"
        lowerBound="1" eType="#//ParameterDirectionKind" defaultValueLiteral="in">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates whether a parameter is being sent into or out of a behavioral element."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operation" ordered="false"
        eType="#//Operation" changeable="false" volatile="true" transient="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Operation owning this parameter."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ParameterDirectionKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.&#xD;&#xA;This enumeration defines for Work Definition Parameter instances whether the parameter represents an input, output, or input as well as output."/>
    </eAnnotations>
    <eLiterals name="return">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that parameter values are passed as return values from a behavioral element back to the caller."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="in" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that parameter values are passed into the behavioral element by the caller.&#xD;&#xA;A Work Definition Parameter instance with this direction value represents an input."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="out" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that parameter values are passed from a behavioral element out to the caller.&#xD;&#xA;A Work Definition Parameter instance with this direction value represents an output."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="inout" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.&#xD;&#xA;A Work Definition Parameter instance with this direction value represents an input and output."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element."/>
    </eAnnotations>
    <eOperations name="notApplyToSelf" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="not_apply_to_self"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="not constrainedElement->includes(self)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A constraint cannot be applied to itself."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="valueSpecificationBoolean" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="value_specification_boolean"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.specification().booleanValue().isOclKindOf(Boolean)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value specification for a constraint must evaluate to a Boolean value."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constrainedElement" upperBound="-1"
        eType="#//Element">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The ordered set of Elements referenced by this Constraint."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
        lowerBound="1" eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A condition that must be true when evaluated in order for the constraint to be satisfied."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="context" ordered="false"
        eType="#//Namespace" eOpposite="#//Namespace/ownedRule">
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ValueSpecification" abstract="true"
      eSuperTypes="#//TypedElement #//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A value specification is the specification of a (possibly empty) set of instances, including both objects and data values."/>
    </eAnnotations>
    <eOperations name="isComputable" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="false"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="integerValue" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query integerValue() gives a single Integer value when one can be computed."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="booleanValue" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query booleanValue() gives a single Boolean value when one can be computed."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="stringValue" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query stringValue() gives a single String value when one can be computed."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="unlimitedValue" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isNull" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isNull() returns true when it can be computed that the value is null."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="false"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Extension" eSuperTypes="#//Association">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <eAnnotations source="ownedEnd">
        <details key="lowerBound" value="1"/>
        <details key="upperBound" value="1"/>
      </eAnnotations>
      <contents xsi:type="ecore:EReference" name="ownedEnd" upperBound="-1" eType="#//ExtensionEnd"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="References the end of the extension that is typed by a Stereotype."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Association/ownedEnd"/>
      </contents>
    </eAnnotations>
    <eOperations name="nonOwnedEnd" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="non_owned_end"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="metaclassEnd()->notEmpty() and metaclass()->oclIsKindOf(Class)"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The non-owned end of an Extension is typed by a Class."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="isBinary" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="is_binary"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="memberEnd->size() = 2"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An Extension is binary, i.e., it has only two memberEnds."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="metaclassEnd" ordered="false" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype)."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="memberEnd->reject(ownedEnd)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="metaclass" ordered="false" lowerBound="1" eType="#//Class">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype)."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="metaclassEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isRequired" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="ownedEnd->lowerBound() = 1"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isRequired" ordered="false"
        lowerBound="1" eType="#//Boolean" changeable="false" volatile="true" transient="true"
        defaultValueLiteral="false" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the multiplicity of the Property referenced by Extension::ownedEnd; a multiplicity of 1 means that isRequired is true, but otherwise it is false. Since the default multiplicity of an ExtensionEnd is 0..1, the default value of isRequired is false."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metaclass" ordered="false"
        lowerBound="1" eType="#//Class" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Class/extension">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExtensionEnd" eSuperTypes="#//Property">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An extension end is used to tie an extension to a stereotype when extending a metaclass."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <eAnnotations source="type">
        <details key="lowerBound" value="1"/>
        <details key="eType" value="spem2Complete::Stereotype"/>
      </eAnnotations>
      <contents xsi:type="ecore:EOperation" name="lowerBound" ordered="false" lowerBound="1"
          eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default&#xD;&#xA;lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//MultiplicityElement/lowerBound"/>
        <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
          <details key="body" value="lowerBound = if lowerValue->isEmpty() then 0 else lowerValue->IntegerValue() endif"/>
        </eAnnotations>
      </contents>
      <contents xsi:type="ecore:EReference" name="type" ordered="false" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="References the type of the ExtensionEnd. Note that this association restricts the possible types of an ExtensionEnd to only be Stereotypes."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//TypedElement/type"/>
      </contents>
      <contents xsi:type="ecore:EAttribute" name="lower" ordered="false" eType="#//Integer"
          defaultValueLiteral="0">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This redefinition changes the default multiplicity of association ends, since model elements are usually extended by 0 or 1 instance of the extension stereotype."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//MultiplicityElement/lower"/>
      </contents>
    </eAnnotations>
    <eOperations name="multiplicity" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="(self->lowerBound() = 0 or self->lowerBound() = 1) and self->upperBound() = 1"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The multiplicity of ExtensionEnd is 0..1 or 1."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="aggregation" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.aggregation = #composite"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The aggregation of an ExtensionEnd is composite."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Image" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Physical definition of a graphical image."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="content" ordered="false"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="location" ordered="false"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="format" ordered="false"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This indicates the format of the content - which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP.&#xD;&#xA;&#xD;&#xA;In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example &quot;SVG&quot; could instead be expressed as &quot;MIME: image/svg+xml&quot;."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ElementImport" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier."/>
    </eAnnotations>
    <eOperations name="visibilityPublicOrPrivate" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="visibility_public_or_private"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.visibility = #public or self.visibility = #private"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The visibility of an ElementImport is either public or private."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="importedElementIsPublic" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="imported_element_is_public"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An importedElement has either public visibility or no visibility at all."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="getName" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="if self.alias->notEmpty() then &#xA;  self.alias&#xA;else&#xA;  self.importedElement.name&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" ordered="false"
        lowerBound="1" eType="#//VisibilityKind" defaultValueLiteral="public">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="alias" ordered="false"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importedElement" ordered="false"
        lowerBound="1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the PackageableElement whose name is to be added to a Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importingNamespace" ordered="false"
        lowerBound="1" eType="#//Namespace" eOpposite="#//Namespace/elementImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Namespace that imports a PackageableElement from another Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageImport" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces."/>
    </eAnnotations>
    <eOperations name="publicOrPrivate" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="public_or_private"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.visibility = #public or self.visibility = #private"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The visibility of a PackageImport is either public or private."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" ordered="false"
        lowerBound="1" eType="#//VisibilityKind" defaultValueLiteral="public">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importedPackage" ordered="false"
        lowerBound="1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Package whose members are imported into a Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importingNamespace" ordered="false"
        lowerBound="1" eType="#//Namespace" eOpposite="#//Namespace/packageImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Namespace that imports the members from a Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//DataType">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An enumeration is a data type whose values are enumerated in the model as enumeration literals."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1"
        eType="#//EnumerationLiteral" containment="true" eOpposite="#//EnumerationLiteral/enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The ordered set of literals for this Enumeration."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An enumeration literal is a user-defined data value for an enumeration."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" ordered="false"
        eType="#//Enumeration" eOpposite="#//Enumeration/ownedLiteral">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Enumeration that this EnumerationLiteral is a member of."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#//DataType">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueExpression" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context."/>
    </eAnnotations>
    <eOperations name="languageBodySize" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="language_body_size"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="language->notEmpty() implies (body->size() = language->size())"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If the language attribute is not empty, then the size of the body and language arrays must be the same."/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" upperBound="-1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The text of the expression, possibly in multiple languages."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" upperBound="-1"
        eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Expression" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operand" upperBound="-1"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a sequence of operands."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkDefinitionPerformer" abstract="true"
      eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Work Definition Performer is an abstract Classifier that represents the relationship of a work performer to a Work Definition.  Different specialization of Work Definition will introduce different kinds of performers.  Work Definition Performer is intended to be specialized adding the association to the concrete performer class."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedWorkDefinition" ordered="false"
        lowerBound="1" eType="#//WorkDefinition" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This derived union provides access to all the Work Definitions a Work Definition Performer instance is related to."/>
      </eAnnotations>
      <eAnnotations source="union"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkDefinition" abstract="true" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Work Definition is an abstract Classifier that generalizes all definitions of work within SPEM 2.0.  Work Definition defines some default associations to Work Definition Parameter and Constraint. Work Definitions can contain sets of pre- and post-conditions defining constraints that need to be valid before the described work can begin or before it can be declared as finished.  Note that general UML constraints inherited via Classifier can be used to define additional constraints and rules for Work Definitions.&#xD;&#xA;Work Definitions represent the behavior for doing work.  In contrast to SPEM 1.1 the Work Definition behavior is not bound to one specific classifier as an operation, but is a performer independent definition of work represented as a classifier itself.  For example, a Work Definition could represent work that is being performed by one specific Role (e.g. a Role performing a specific Activity), by many Roles working in close collaboration (many Roles all working together on the same interdisciplinary Activity), or complex work that is performed throughout the lifecycle (e.g. a process defining a breakdown structure for organizing larger composite units of work performed by many Roles working in collaboration).&#xD;&#xA;Work Definitions can be modeled with behavior model representations such as UML 2.0 Activity diagrams by merging this UML 2.0 meta-model package into the Process Behavior package.  However, it is also a common practice to just textually describe the behavior of work definitions. Such descriptions can be added by merging this package into the Managed Content package."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="postcondition" ordered="false"
        upperBound="-1" eType="#//Constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This composition association adds an optional post-condition to a Work Definition.  A post-condition defines any kind of constraint that must evaluate to true before the work described for the Work Definition can be declared completed or finished and which other Work Definitions might depend upon (e.g. for their pre-conditions).  For example, a post-condition could define that a work product defined to be the output must be in a specific state before the Work Definition can end (e.g. �Use Case must be in state fully described and reviewed by System Analyst�)."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedRule"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="precondition" ordered="false"
        upperBound="-1" eType="#//Constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This composition association adds an optional pre-condition to a Work Definition.  A pre-condition defines any kind of constraint that must evaluate to true before the work described for the Work Definition can start. For example, a pre-condition could define that an input Work Product needs to be in a specific state or that other related work must be in a certain state (e.g. �Input document X has been reviewed and signed by customer AND the work defined by Work Definition �Management Review� is complete�) before the work can begin."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedRule"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1"
        eType="#//WorkDefinitionParameter" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Work Definition can define an ordered set of parameters to specify inputs and outputs.  The concrete subclasses of Work Definition need to define their own subclasses of Work Definition Parameter to add reference to concrete input/output meta types."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="workDefinitionActivtyContext"
        ordered="false" upperBound="-1" eType="#//ActivityExt"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="workDefinitionTransitionContext"
        ordered="false" upperBound="-1" eType="#//TransitionExt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkDefinitionParameter" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Definition Parameter is an abstract generalization for Process Elements that represent parameter for Work Definitions.  It is used for declarations of inputs and outputs.  The meta-classes for the input/output types are to be defined by Work Definition Parameters concrete subclasses.&#xD;&#xA;This class is to be specialized by a class defining an association to the class defining the input/output meta-class. SPEM 2.0 distinguishes between Work Product Definitions and Work Product Use.  The general parameter class Work Definition Parameter defines common properties used by Work Definition specialization that either use Work Product Definitions or Work Product Uses.&#xD;&#xA;This package extends the Work Definition Parameter class introduced in the Core package with associations to entry and/or exist states for its Work Product Use or Work Definition parameter values."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="direction" ordered="false"
        lowerBound="1" eType="#//ParameterDirectionKind" defaultValueLiteral="inout">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute represents the kind of the input as specified by the enumeration Parameter Direction Kind."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="exitState" ordered="false"
        upperBound="-1" eType="#//StateExt" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Given that an instance of Work Product Use has been specified as output for a specific Activity, then the Activity Exist State attribute specifies the desired state of instances of the referenced Work Product Use instances when work on the Activity is finished."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="entryState" ordered="false"
        upperBound="-1" eType="#//StateExt" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Given that an instance of Work Product Use has been specified as an input for a specific Activity, then the Activity Entry State attribute specifies the desired state of instances of the referenced Work Product Use instance when work on the Activity is initiated.  &#xD;&#xA;For some Work Products Uses state is expressed in percentage of completion, compliance to work product checklist, informal state descriptions, etc.  Others have very specific states expressed as enumerations such as [identified, briefly described, outlined, detailed] for use cases.  Other Work Product states relate to some quality measures or lifecycle states such as [reviewed, implemented, tested]."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateExt" eSuperTypes="#//ExternalReference">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="State_ext"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The State_ext represents a reference to a model class in an external behavior model representing a state."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalReference" abstract="true" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="External Reference is a Classifier that represents an abstract generalization of all classes representing references to external behavior models."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityExt" eSuperTypes="#//ExternalReference">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="Activity_ext"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The Activity_ext represents a reference to a model class in an external behavior model representing a definition of behavior."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TransitionExt" eSuperTypes="#//ExternalReference">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="Transition_ext"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The Transition_ext represents a reference to a model class in an external behavior model representing a transition between states."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Kind" eSuperTypes="#//ExtensibleElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Kind is an Extensible Element which instances are used to qualify other SPEM 2.0 Extensible Element instances with a user-defined type or kind.&#xD;&#xA;As many methods and processes to be modeled with SPEM 2.0 need to define their own refined vocabulary, Kind provides the ability to a SPEM 2.0 modeler to expresses such user-defined qualifications for instances of Extensible Element.  Because Kind is an Extensible Element itself one can define Kinds for the Kind class itself as well.&#xD;&#xA;For example, a subclass of Extensible Elements that typically utilizes Kinds is the meta-model class Guidance. Typical Guidance kinds would be: White Paper, Guideline, Checklist, Template, Reports, etc.  Because of the Applicable MetaClass constraints, these Kinds can only be related to instances of the Guidance class as well as instances of any subclasses of Guidance such as Metric.&#xD;&#xA;Other examples are Kinds for Breakdown Elements such as Phase, Iteration, Sprint, or Increment; Kinds of Work Products such as Artifact, Deliverable, or Outcome; Kinds of Categories such as Classification, View, Grouping, Practice, Discipline, Domain, etc.  All of these allow SPEM 2.0 users to distinguish the special kinds of SPEM 2.0 elements that play important role in their method or process."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="applicableMetaClass" ordered="false"
        lowerBound="1" eType="#//Class">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An instance of Kind can only be used for instances of exactly one SPEM 2.0 Extensible Element subclass or its subclasses.  This property specifies which one."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExtensibleElement" abstract="true" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Extensible Element is an abstract generalization that represents any SPEM 2.0 class for which it is possible to assign a Kind to its instances expressing a user-defined qualification.  Every SPEM 2.0 class that allows such a qualification derives directly or indirectly from Extensible Element.&#xD;&#xA;Extensible Element provides the property to relate a Kind class for its sub-classes.  Such Kinds cannot be reused for many different subtypes of Extensible Element and therefore can only be related to exactly one meta-model class.&#xD;&#xA;Extensible Element defines a constraint called Applicable MetaClass.  The constraint defines that the Kind an instance of Extensible Element links to has to link to an applicable Meta Class that is either of the same class as Extensible Element or a superclass of the Extensible Element class.  See Kind for more details."/>
    </eAnnotations>
    <eOperations name="applicableMetaClass" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="Applicable MetaClass"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.conformsTo(self.kind.applicableMetaClass)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="kind" ordered="false" eType="#//Kind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An instance of Extensible Element can be linked to zero or one Kind in which the Kind instance expresses a specific user-defined qualification for that Extensible Element instance."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Milestone" eSuperTypes="#//WorkBreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Milestone describes a significant event in a development project, such as a major decision, completion of a deliverable, or meeting of a major dependency (like completion of a project phase).  Because, Milestone is commonly used to refer to both the event itself and the point in time at which the event is scheduled to happen, it is modeled as a Breakdown Element (i.e. it appears as part of a breakdown structure)."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requiredResults" ordered="false"
        upperBound="-1" eType="#//WorkProductUse"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkBreakdownElement" abstract="true"
      eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Breakdown Element is a special Breakdown Element that provides specific properties for Breakdown Elements that represent work.  The properties are specific to breakdown structures and do not apply to all Work Definition subclasses, though.&#xD;&#xA;Work Breakdown Element represents a work specific breakdown element to be used in a work breakdown structure.&#xD;&#xA;&#xD;&#xA;A Work Breakdown Element is a special Breakdown Element that provides specific properties for Breakdown Elements that represent or refer to Work Definitions.  For example its subclass Activity defines work as it is also a subclass of Work Definition.  Its subclass Task Descriptor does not define work by itself, but refers to a Work Definition and therefore can have the same common properties and Work Breakdown Element has."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkToPredecessor" ordered="false"
        upperBound="-1" eType="#//WorkSequence" eOpposite="#//WorkSequence/successor"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkToSuccessor" ordered="false"
        upperBound="-1" eType="#//WorkSequence" eOpposite="#//WorkSequence/predecessor"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isRepeatable" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute is used to define repetition of work, e.g. iterations.  A Work Breakdown Element with this attribute set to True shall be repeated more than once on the same set of artifacts.  For example, if one wants to model that a specific Activity instance shall represent an iteration in a process then this attribute shall be set to true indicating that the Activity and therefore all of its sub-Activities will be performed more than once.&#xD;&#xA;The difference to the hasMultipleOccurrences attribute defined for Breakdown Element is that Work Breakdown Elements with the isRepeatable flag will be performed one after the other (i.e. not in parallel).  For Breakdown Elements with hasMultipleOccurrences set to true this is undefined and up to the project planner.  If both attributes are set to true then isRepeatable takes precedence."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOngoing" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If the isOngoing attribute is set to true for a Work Breakdown Element instance, then the element describes an ongoing piece of work without a fixed duration or end state.  For example, the Work Breakdown Element could represent work of an administrator continuously (e.g. 3h a day) working to ensure that systems are kept in a certain state.  Another example would be program management work overseeing many different projects being scheduled for one particular project at specific reoccurring intervals during the whole lifecycle of the project."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isEventDriven" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The isEventDriven attribute indicates that the Work Breakdown Element describes an instance of work which is not started because it has been scheduled to start at a certain point of time, because preceding work is being completed, or input work products are available, but because another specific event has occurred.&#xD;&#xA;Examples for such events are exceptions or problem situations which require specific work to be performed as a result.  Also change management work can be modeled as event driven work analyzing a change request or defect and allocating work dynamically to resources to deal with it following the work described with such Work Breakdown Element.  The events themselves are not modeled in this version of the specification.  They shall be described as part of the normal descriptions fields available.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BreakdownElement" abstract="true" eSuperTypes="#//ProcessElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Breakdown Element is an abstract generalization for any type of Process Element that is part of a breakdown structure.  It defines a set of properties available to all of its specializations.  Any of its concrete subclasses can be �placed inside� an Activity (via the nested Breakdown Element association) to become part of a breakdown of Activities as well as the Activities namespace.  As Activities are Breakdown Elements themselves and therefore can be nested inside other activities, an n-level breakdown structure is defined by n nested Activities.  In addition to Activities other Breakdown Elements can be nested inside Activities as leaf elements of the breakdown.&#xD;&#xA;Breakdown Element is an abstract generalization for any type of Process Element that is part of a breakdown structure.  It defines a set of properties available to all of its specializations."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="hasMultipleOccurrences"
        ordered="false" lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The hasMultipleOccurrences attribute expresses that if set to �true� then when the process is enacted that the respective Breakdown Element typically will occur in more than one instance (i.e. more than one instance for the Breakdown Element instance).&#xD;&#xA;This might provide important guidance for creating plans from a Process.  For example, a Work Definition such as �Detail Use Case� would be performed for every use case identified for a particular Iteration or Activity.  Generating a plan would list one Work Definition instance per use case each listing a different use case instance as the input/output.  In contrast to the isRepeatable attribute defined for Work Breakdown Element the hasMultipleOccurrences attribute does not assume any dependencies amongst the occurrences of the Breakdown Element.  For example, the �Detail Use Case� Work Definition occurrences mentioned above can be performed in parallel as well as one after the other."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOptional" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The isOptional attribute indicates that the Breakdown Element describes work, a work product, or even work performer, which inclusion is not mandatory when performing a project that is planned based on a process containing this element."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="planningData" ordered="false"
        eType="#//PlanningData" containment="true">
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isPlanned" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A key application for Development Processes expressed with Breakdown structures is to generate a project plan from it.  A process as defined in SPEM 2.0 is a multi-dimensional structure defining what work is being performed at what time by which roles using which input and producing what outputs.  A project plan as it is represented in project planning tools such as IBM Rational Portfolio Manager or Microsoft Project normally does not need all this information and is normally limited to just representing a subset.  For example, a typical MS Project plan only represents the work breakdown consisting of Tasks and Activities (sometimes referred to as summary tasks).  It does not show the input and output Work Products for a Task, but it can show which roles shall be staffed for performing the Task.  However, such role allocation need to be replaced with concrete resources when instantiating the plan for a concrete project.  Sometimes project plans can then again be organized differently by organizing work by deliverables in which Work Products are mapped to the plan's summary tasks and Task that have these work products as output mapped below such as summary task.  Therefore, a process can make recommendations about which elements to include and which to exclude when generating a plan.  When the isPlanned attribute is set to False for an instance of a Breakdown Element, then this element shall not be not included when a concrete project plan is being generated from the breakdown structure that contains this element.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessElement" abstract="true" eSuperTypes="#//DescribableElement #//ProcessPackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Process Elements is an Extensible Element that represents abstract generalization for all elements that are part of a SPEM 2.0 Process."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="processKind" ordered="false"
        eType="#//ProcessKind">
      <eAnnotations source="redefines" references="#//ExtensibleElement/kind"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DescribableElement" abstract="true"
      eSuperTypes="#//ExtensibleElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Describable Element is a Extensible Element that represents an abstract generalization for all elements in SPEM 2.0 that can be documented with textual descriptions.  Examples for Describable Elements are Roles or Work Products, which have descriptive text associated that textually define the element as well as providing guidance on how to use it.&#xD;&#xA;Describable Element is the superclass for elements in Process Structure as well as Method Content for which concrete textual descriptions are being defined in the form of documenting attributes grouped in a matching Content Description instance.  Describable Elements are intended to be published in method or process publications.  Describable Element defines that the element it represents will have content �attached� to it.  Content Description is the abstraction for the actual places in which the content is being represented.  This separation allows a distinction between core model elements describing the structure of the model from the actual description container providing, for example, the documentation of the Describable Element in different alternatives languages, audiences, licensing levels, etc."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="guidance" ordered="false"
        upperBound="-1" eType="#//Guidance"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="description" ordered="false"
        eType="#//ContentDescription" containment="true">
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="metric" ordered="false"
        upperBound="-1" eType="#//Metric"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Guidance" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Guidance is a Describable Element that provides additional information related to Describable Elements.  The particular Guidance should be classified with Kinds (Section 8.2) that indicates a specific type of guidance for which perhaps a specific structure and type of content is assumed.  Examples for Kinds for Guidance are Guidelines, Templates, Checklists, Tool Mentors, Estimates, Supporting Materials, Reports, Concepts, etc."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodContentElement" abstract="true"
      eSuperTypes="#//DescribableElement #//VariabilityElement #//MethodContentPackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Method Content Element is an abstract Describable Element that represents an abstract generalization for all Method Content Elements in SPEM 2.0.  Because Method Content Element derives from Describable Element it contains textual descriptions.&#xD;&#xA;Content Element in the package Method Plugin inherits from Variability Element and not directly from Method Element anymore.  This is achieved using UML 2.0 package merge semantics.  Only if an adopter of this meta-model decides to realize Method Plugins, he would get the variability and extension capabilities for all Content Elements.&#xA;Content Element inherits the semantics of Variability Element.&#xA;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="methodContentKind" ordered="false"
        eType="#//MethodContentKind">
      <eAnnotations source="redefines" references="#//ExtensibleElement/kind"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="suppressedMethodContentElement"
        ordered="false" upperBound="-1" eType="#//MethodContentElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodContentPackageableElement" abstract="true"
      eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Method Content Packageable Element is an abstract generalization for Method Content Package and Method Content Element supporting the redefinition of the packagedElement association of Method Content Package inherited from the UML 2 class."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="VariabilityElement" abstract="true"
      eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Variability Element is an abstract class derived from Classifier that provides capabilities for content variation and extension to a specific list of SPEM 2.0 classes.  It defines a superclass for Activity (Section 9.1), and Section Section (11.6), and Method Content Element (Section 12.4) in the overall SPEM 2.0 taxonomy of classes using the UML 2 package merge mechanism.  The association Variability Specialization shall only be instantiated between two subclasses of Variability Element of the same concrete type.  The element on varaibilitySpecialElement side of the relationship defines a value for the attribute variabilityType defining the nature of the relationship using a literal from the enumeration Variability Type.&#xD;&#xA;Variability Element of the meta-model package Method Plugins adds the capabilities of variation and extension to SPEM Elements that derive from it.  Variability provides a mechanism for customizing Variability Elements without actually directly modifying their original structures or textual content, but by just being able to describe with separate objects the differences (additions, changes, omissions) relative to the original.  This Method Plugin concept allows users to factor their method content and processes in interrelated units and even to architect method content and processes in layers that extend each other with new capabilities.  The resulting method and process design can be dynamically combined and applied on demand using the interpretation rules defined for Variability Element Specializations assembling for process practitioners the most accurate method and process descriptions possible.  It also allows process practitioners to extend and tailor method content and processes they do not own and to easily upgrade to newer versions by simply reapply their personal changes to these upgrades."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="variabilityType" ordered="false"
        lowerBound="1" eType="#//VariabilityType" defaultValueLiteral="na">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If in instance of the variabilitySpecialization association between two Variability Elements of the same type exists, then the variabilityType attribute specifies how the element at the variabilitySpecialElement end of the association changes the Content Element at the variabilityBasedOnElement end. See the Variability Type enumeration class for definitions for the different types of variability."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="variabilityBasedOnElement"
        ordered="false" lowerBound="1" eType="#//VariabilityElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="VariabilityType">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Variability Type is an Enumeration used for values for instances of Variability Element's attribute variabilityType.  It defines the nature of how a Variability Element extends another Variability Element. See enumeration literals for definitions for each type."/>
    </eAnnotations>
    <eLiterals name="na">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This is the default &quot;not assigned&quot; value of a Variabillity Element's variabilityType attribute which is set in the case no variability association is present between the Variability Element and other Variability Elements.&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="contributes" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Contributes provides a way for instances of Variability Elements to contribute their properties into their base Variability Element without directly altering any of its existing properties, i.e. in an additive fashion.  Properties contributed are: attribute values and association instances.  The effect after interpretation of contribution is that the base Variability Element is logically replaced with an augmented variant of the element that combines attribute values and association instances.  The way this combination is realized depends on the type of the attribute or association.  For example, String attributes are concatenated resolving embedded commands for dependent text or merging text fragments (e.g. descriptions for content elements).  Additional elements in to-many associations are added (e.g. additional Guidance elements or Task Descriptors of an Activity).  Different elements in to-one associations are ignored (e.g. the one Primary Performer of a Task).  Multiple Content Elements can contribute to the same base element and all of these contributions properties are added to the base in the same fashion. The following table provides the detailed list of interpretation rules:&#xD;&#xA;&#xD;&#xA;attribute values:&#x9;String values from the special Variability Element are concatenated with values from the based-on Variability Element.  Other values from the special Variability Element of any other type such as Integer, Date are ignored.&#xD;&#xA;The identifying attributes guid and name of Method Element are exempt from this rule and will not be modified.&#xD;&#xA;0..1-association instances:&#x9;The one association instance of the based-on Variability Element is kept and any association from the contributing special Variability Element is ignored.&#xD;&#xA;0..n-association instances:&#x9;Association instances of the special Variability Element are added to the already existing association instances of the based-on element.  If both Variability Elements refer to the same object then only one instance of the association will remain.&#xD;&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="extends" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Extension allows Method Plugins to easily reuse elements from a Base Plugin by providing a kind of inheritance for the special Variability Element.  Attribute values and Association instances are inherited from the based-on Variability Element to the special Variability Element.  The result of interpretation is that the special element has the same properties as the based-on has, but might override the inherited properties with its own values.  Hence extends is not used to modify content of the base Plugin, but to provide the ability for the extending Plugin to define its own content which is a variant of content already defined (e.g. a special version of a generic Review Record for a specific type of review).  The effect of this is that the base Variability Element and any number of extending Variability Elements can be used side by side, but refer to each other via the extends relationship.  Extends also provides the key mechanism for binding Capability Patterns to Processes: A pattern is applied by defining an extends relationships from an Activity of the applying Processes to the Pattern.  The Activity inherits associations instances from the pattern and the pattern appears to be part of the resulting Process after Interpretation.&#xD;&#xA;&#xD;&#xA;attribute values:&#x9;Values from the based-on Variability element are inherited and used to populate the special Variability Elements attributes.  If the special element attributes are already populated the inherited values are ignored.  &#xD;&#xA;The identifying attributes guid and name of Method Element are exempt from this rule and will not be modified.&#xD;&#xA;0..1-association instances:&#x9;The one association instance of the based-on Variability Element is inherited to the special Variability Element.  If the special Variability Element defines its own association instance then the inherited one is ignored.&#xD;&#xA;0..n-association instances:&#x9;Association instances defined for the based-on Variability Element are inherited to the special Variability Element.  If the special Variability Element defines its own association instances, then the inherited ones are ignored.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="replaces" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Replaces provides a way for Variability Elements to replace a base Variability Element without directly changing any of its existing properties.  This is in most cases used for Method Plugins that aim to replace specific Content Elements such as Roles, Task, or Activities with either a complete new variant or to change fundamental relationships of these elements (e.g. Role-Artifact responsibility).  Properties replaced are attribute values and association instances.  The effect of this is that the base Content Element is logically replaced with this new variant of the element to which all incoming associations still point as before, but which has potentially new attribute values and outgoing association properties.  This provides a very powerful mechanism to replace, for example, whole Activities in a Process with complete new realizations of the Activity.  For instance, replacing an Activity doing use case-based design with an activity doing agile code-centric development doing the same work using a different development technique utilizing different Roles, Tasks, etc.  Another example, would be to replace an Activity that describes database design for an RDBMS with an Activity that describes database design for an OODBMS.  A Variability Element can only be replaced by one other element at a time.  For example, if two Method Plugins replace the same element only one Method Plugin can be used for interpretation (see concept of Method Configuration for more details on how to resolve such conflicts).  The following table provides the detailed list of interpretation rules:&#xD;&#xA;&#xD;&#xA;attribute values:&#x9;Values from the special Variability Element are replaced with values from the based-on Variability Element including unassigned values.&#xD;&#xA;The identifying attributes guid and name of Method Element are exempt from this rule and will not be modified.&#xD;&#xA;0..1-association instances:&#x9;The one association instance of the based-on Variability Element is replaced with the association instance from the replacing special Variability Element.  If the special Variability Element does not have an association instance then resulting element will also not have an association.&#xD;&#xA;0..n-association instances:&#x9;Association instances of the special Variability Element replace all association instances of the based-on Variability Element.&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="extendsreplaces" value="4">
      <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
        <details key="originalName" value="extends-replaces"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Extends-replaces combines the effects of extends and replace variability into one new variability type. Whereas the replaces variability completely replaces all attributes and outgoing association instances of the base variability element with new values and instances, or removes all values or association instances if the replacing element does not define any. Extends-replaces variability only replaces the values that have been redefined and leaves all other values of the base element as is.  In other words, extends-replace allows selectively replacing only parts of the base elements attributes and association instances. This type of variability can be used for method plug-ins that, for example, would like to rename elements or replace some descriptions with new ones without completely remodeling all other relationships and attributes it needs to keep intact.&#xD;&#xA;&#xD;&#xA;attribute values:&#x9;Values from the special Variability Element are replaced with values from the based-on Variability Element not including unassigned values. This rule also applies to identifying attributes. In other words, after the replacements the resulting object has the object id of the extends-replaces element.&#xD;&#xA;0..1-association instances&#x9;: A to-one association instance of the based-on Variability Element is replaced with the association instance from the replacing special Variability Element.  If the special Variability Element does not have an association instance, then resulting element will keep its association instance from the base element.&#xD;&#xA;0..n-association instances: Association instances of the special Variability Element replace all association instances of the based-on Variability Element.  If the replacing special Variability Element does not define any association instances, but the base element does, then the resulting element will keep these association instances.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodContentKind" eSuperTypes="#//MethodContentElement #//Kind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Method Content Kind is a Kind and Method Content Element that represent a method content specific refinement of the Kind class defined in Core.  Only Method Content Elements can be used for Method Content Kinds.  It can be packaged in Method Content Packages."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ContentDescription" eSuperTypes="#//Class">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Content Description is a Class that is used to store the textual description for a Describable Element.  It defines standard attributes applicable for all Describable Element subtypes.&#xD;&#xA;Implementers of this specification can subclass Content Description to define their own matching Content Description subtypes that add user-defined description attributes to all instances of a specific Describable Element�s Content Description.  Additionally, user-defined attributes can be added to individual Content Description instances when the SPEM 2.0 meta-model is instantiated creating UML 2.0 attributes for the Content Description class accessible via the ownedAttribute inherited from Class.  Content Descriptions are typically localized using a resource allocation mechanism for its String type attributes."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="presentationName" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Every Describable Element described by a Content Description has a name (inherited from Named Element in UML 2.0 Infrastructure), which is used for internal references of the element.  In addition to name every Describable Element can maintain a presentation name as part of the Content Description, which is the externally visible/published name of the element, which might be localized."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="briefDescription" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Every Describable Element shall be briefly described with one or two sentences summarizing the element."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="mainDescription" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute stores the main descriptive text for the Describable Element.  All text that is not part of any of the more specific attributes shall be stored here.  If the description is divided into sections using the Section class, then only the text from the �head� of the content description to the first section will be stored here (similar to a normal document where you can place text between its beginning and its first section heading)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="purpose" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute summarizes the main reason or rationale for having or performing this Describable Element as part of a Process or Method. It describes what is intended to be achieved with it and why the Process Practitioner should include it."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="section" upperBound="-1"
        eType="#//Section" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Content Description can optionally be structured into Sections.  This association is use to decompose the mainDescription attribute into a hierarchy of Sections.  Text stored in mainDescription when Sections are defined represents text presented before the first Section."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Section" eSuperTypes="#//Class #//VariabilityElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Section is a special Class that represents a structural subsection of a Content Description�s mainDescription attribute.  It is used for either large scale documentation of Describable Elements organized into sections as well as to flexibly add new Sections to Describable Elements using contribution variability added to the Section concept for Method Plug-ins.&#xD;&#xA;Section in the package Method Plugin inherits from Variability Element and extends Section defined in Managed Content (Section 11.6) with new capabilities for variability.&#xD;&#xA;For example, when a Task Definition contributes to another Task Definition its description association is contributed including its Sections (i.e. its Steps), which are modeled as parts of the Content Description instance.  Sections can be nested and therefore the Task Definition�s descriptions can be flexibly organized in Steps with sub-Steps.  Sections are Variability Elements themselves, so they can contribute to each other.  For example, one could model a Task Definition Step as a Section instance without relating it to a Task Definition�s Content Description that directly contributes to (or replaces) another Section which is part of a Content Description.  This contribution (or replacement) would add new description text to the original step description (or replace the original step description).  Another example would be to contribute to Guidance; for example contribute new check list items organized as Sections to an existing check list guidance element."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="sectionName" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attributes stores the name or the header of the section."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="sectionDescription" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute stores the description text for a Content Description�s Section."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subSection" upperBound="-1"
        eType="#//Section" containment="true">
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="predecessor" ordered="false"
        eType="#//Section">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association defines the predecessor for contributed Sections to be inserted into an existing list of Sections of a Content Description."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Metric" eSuperTypes="#//DescribableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Metric is special Guidance that contains one or more constraints that provide measurements for any Describable Element. Because Metric is Guidance, different Kinds (Section 8.2) can be defined for Metrics to distinguish different groups of Metrics such as Productivity, Quality, or Scale.&#xD;&#xA;A Metric defines a standard measurement for instances of a Describable Element in SPEM 2.0.  For example, a process engineer can define Metrics for Work Definitions such as Activities (estimated effort in man hours), Metrics for Work Products (quality averages such as error per klocs), or Metrics for Roles (costs per hour; cost per delivered results). A Metric is documented with Content Descriptions associated to the Metric as well as formalized using instances of the UML 2.0 Constraint class. Metrics can be qualified with Kinds."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Metric defines one or more Constraints.  The property subsets the inherited ownedRule property from UML 2.0 Infrastructure�s Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessPackageableElement" abstract="true"
      eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Process Packageable Element is an abstract generalization for Process Package and Process Element supporting the redefinition of the packagedElement association of Process inherited from the UML 2 class."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessKind" eSuperTypes="#//ProcessElement #//Kind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Process Kind is a Kind and Process Element that represent a process specific refinement of the Kind class defined in Core.  Only Process Elements can be used for Process Kinds.  It can be packaged in Process Packages."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PlanningData" eSuperTypes="#//ProcessElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Planning Data is a Process Element that adds planning data to Breakdown Elements when it is used for generating project plans from a process."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="startDate" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines the absolute start date for the Breakdown Element."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="finishDate" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines the absolute finish date for the Breakdown Element."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="rank" ordered="false" lowerBound="1"
        eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Defines the ranking of the Breakdown Element relative to other Breakdown Elements in same Activity."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="duration" ordered="false"
        lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Duration of a Breakdown Element.  Could be an exact recommended duration, or a ratio."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkSequence" eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Work Sequence is a Breakdown Element that represents a relationship between two Work Breakdown Elements in which one Work Breakdown Elements depends on the start or finish of another Work Breakdown Elements in order to begin or end.&#xD;&#xA;The Work Sequence class defines predecessor and successor relations amongst Work Breakdown Elements.  This information is in particular critical for use of the process in planning applications."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="linkKind" ordered="false"
        lowerBound="1" eType="#//WorkSequenceKind" defaultValueLiteral="finishToStart">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute expresses the type of the Work Sequence relationship by assigning a value from the Work Sequence Kind enumeration."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="predecessor" ordered="false"
        lowerBound="1" eType="#//WorkBreakdownElement" eOpposite="#//WorkBreakdownElement/linkToSuccessor"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="workSequenceContext" ordered="false"
        upperBound="-1" eType="#//ControlFlowExt"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="successor" ordered="false"
        lowerBound="1" eType="#//WorkBreakdownElement" eOpposite="#//WorkBreakdownElement/linkToPredecessor"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="WorkSequenceKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Work Sequence represents a relationship between two Work Breakdown Element in which one Work Breakdown Element (referred to as (B) below) depends on the start or finish of another Work Breakdown Element (referred to as (A) below) in order to begin or end. This enumeration defines the different kinds of Work Sequence relationships available in SPEM 2.0 and is used to provide values for Work Sequence's linkKind attribute."/>
    </eAnnotations>
    <eLiterals name="finishToStart">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Work Breakdown Element (B) cannot start until Work Breakdown Element (A) finishes. For example, if you have two Work Breakdown Elements, &quot;Construct fence&quot; and &quot;Paint fence,&quot; &quot;Paint fence&quot; can't start until &quot;Construct fence&quot; finishes. This is the most common type of dependency and the default for a new Work Sequence instance.&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="finishToFinish" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Breakdown Element (B) cannot finish until Work Breakdown Element (A) finishes. For example, if you have two Work Breakdown Elements, &quot;Add wiring&quot; and &quot;Inspect electrical,&quot; &quot;Inspect electrical&quot; can't finish until &quot;Add wiring&quot; finishes.&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="startToStart" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Breakdown Element (B) cannot start until Work Breakdown Element (A) starts. For example, if you have two Work Breakdown Elements, &quot;Pour foundation&quot; and &quot;Level concrete,&quot; &quot;Level concrete&quot; can't begin until &quot;Pour foundation&quot; begins.&#xA;"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="startToFinish" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Breakdown Element (B) cannot finish until Work Breakdown Element (A) starts. This dependency type can be used for just-in-time scheduling up to a milestone or the project finish date to minimize the risk of a Work Breakdown Element finishing late if its dependent Work Breakdown Elements slip. If a related Work Breakdown Element needs to finish before the milestone or project finish date, but it doesn't matter exactly when and you don't want a late finish to affect the just-in-time Work Breakdown Element, you can create an SF dependency between the Work Breakdown Element you want scheduled just in time (the predecessor) and its related Work Breakdown Element (the successor). Then if you update progress on the successor Work Breakdown Element, it won't affect the scheduled dates of the predecessor Work Breakdown Element."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ControlFlowExt" eSuperTypes="#//ExternalReference">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="ControlFlow_ext"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The ControlFlow_ext represents a reference to a model class in an external behavior model representing a control flow."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkProductUse" eSuperTypes="#//MethodContentUse">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Product Use is a special Breakdown Element that either represents an input and/or output type for an Activity or represents a general participant of the Activity.  If it is an input/output then the Work Product Use needs to be related to the Activity via the Process Parameter class.  If it is a participant then the Work Product Use is stored in the nestedBreakdownElement composition of the Activity and might be used by one of the sub-activities as an input/output and/or be related to a Role Use via a Process Responsibility Assignment.  Role Use instances are only valid within and specific to the context of an Activity and not to be reused across activities.&#xD;&#xA;A Work Product Use represents an activity specific occurrence of a Work Product input/output type or an Activity participant.  A Work Product Use instance is an Activity specific object and not a general reusable definition of a work product. (The meta-model package Method Content defines a concepts call Work Product Definition for that).  A Work Product Use represents the occurrence of a real Work Product in the context of an activity.   A Work Product Use participant stored with an Activity can only be accessed and reused by the Activity�s sub-Activities and not by any parent or sibling Activities in the Activity breakdown structure.  This scoping of Work Product Use in the local namespace of Activities allows to model different Responsibility Assignments for every Activity, which reflects the fact that work product responsibilities might change throughout the development lifecycle.  In other words, Role Use instances with the same name can be created in different Activities, which all have different Work Product Use responsibilities.&#xD;&#xA;Many processes do not comprise of Work Product Definitions and just define the occurrence of a work product and imply that all team members know what the Work Product Use represents (e.g. by just interpreting the Work Product Use name).  For example a process might define that Stakeholder Requests need to be captured, but does not formally define what a Stakeholder Request is nor prescribes any templates or forms for them.  Team members could choose by themselves which form of representation they choose as well as shift responsibilities for the Work Product during the lifecycle phases (i.e. activities).&#xD;&#xA;A Work Product Use represents a Work Product Definition in the context of one specific Activity.  Every breakdown structure can define different relationships of Work Product Uses to Task Uses and Role Uses.  Therefore one Work Product Definition can be represented by many Work Product Uses each within the context of an Activity with its own set of relationships."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="workProduct" ordered="false"
        eType="#//WorkProductDefinition"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="workProductUseContext"
        ordered="false" upperBound="-1" eType="#//StateExt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodContentUse" abstract="true" eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Method Content Use is an abstract generalization for special Breakdown Elements that references one concrete Method Content Element.  A Method Content Use provides a proxy-like representation of a Method Content Element within breakdown structures.  In addition to just referencing Method Content Elements it allows overriding the Method Content Elements structural relationships by defining its own sets of associations and adding its own Content Description.&#xD;&#xA;Method Content Uses are the key concept for realizing the separation of processes from method content.  A Method Content Use can be characterized as a reference object for one particular Method Content Element, which has its own relationships and properties.  When a Method Content Use is created it shall be provided with congruent copies of the relationships defined for the referenced content element.  However, a user can modify these relationships for the particular process situation for which the Method Content Use has been created. "/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSynchronizedWithSource"
        ordered="false" lowerBound="1" eType="#//Boolean" defaultValueLiteral="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkProductDefinition" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Work Product Definition is Method Content Element that is used, modified, and produced by Task Definitions.  Work Product Definitions can be related to other Work Product Definitions via the Work Product Definition Relationship.&#xD;&#xA;Work Products are in most cases tangible work products consumed, produced, or modified by Tasks.   They may serve as a basis for defining reusable assets.  Roles use Work Products to perform Tasks and produce Work Products in the course of performing Tasks.  Work Products are the responsibility of Role Definitions, making responsibility easy to identify and understand, and promoting the idea that every piece of information produced in the method requires the appropriate set of skills. Even though one Role Definition might &quot;own&quot; a specific type of Work Product, other roles can still use the Work Product for their work, and perhaps even update them if the Role Definition instance instance has been given permission to do so."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="workProductDefinitionContext"
        ordered="false" upperBound="-1" eType="#//StateExt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessParameter" eSuperTypes="#//BreakdownElement #//WorkDefinitionParameter">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Process Parameter is a Work Definition Parameter used for process definitions.  It defines input and output meta-types to be Work Product Uses."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameterType" ordered="false"
        eType="#//WorkProductUse">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association links zero or one Work Product Use instances to a parameter.  Processes could leave the type specification open and not specify a concrete Work Product Use."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkProductUseRelationship" eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Product Use Relationship expresses a general relationship amongst work products.  Kind class instances shall be used to specify the nature of this relationship.&#xD;&#xA;The Work Product Use Relationship can be used to express different kinds of relationships amongst Work Products Uses.  Typical Kinds are �composition� expressing that a work product use instance of an instance is part of another work product instance of an instance. For example, an instance of Actor is part of an instance of Use Case Model.  In contrast to composition another Kind could express �aggregation� indicating that a Work Product Use is used with another Work Product Use.  For example, a customer design deliverable could be defined as a compilation of different other work product uses that are assemble as a report that is delivered to the customer for review.  A third key Kind is �dependency� indicating that a work product use impacts another work product use.  For example, if a use case model work product changes the use case realization work product needs to be updated with these changes."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//WorkProductUse"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" ordered="false"
        lowerBound="1" eType="#//WorkProductUse"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ActivityUseKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="This enumeration defines the nature of the reuse for an Activity that relates to exactly one other Activity via the used Activity association.  Activity Use in SPEM defines the ability to reuse the structures defined for one Activity via its nested Breakdown Element composition in a second Activity without the need to physically copy these structures.  Instead Activity Use defines a way to dynamically inherit these structures from the referenced the activity.  Such reuse is typically established via an Extension relationship and then further refined using additional local Contribution and local Replacement relationships amongst substructure elements of the extending activities."/>
    </eAnnotations>
    <eLiterals name="na">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This is the default value for Activities that do not instantiate the usedActivity association."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="extension" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Extends provides a mechanism for dynamically reusing Activity substructures (elements contained via the nested Breakdown Element composition) in other Activities. Typical applications of Extension are to represent reusable process patterns as activities, which are then dynamically bound to different activities via the Extension use Kind in a larger process.  An Activity is linked via extension by defining a usedActivity association instance from an Activity within the Processes to the Activity representing the process pattern and setting the useKind attribute to the Extension value.  The source Activity inherits all association instances and sub-structures from the base Activity and the Activity appears to be part of the resulting Process after interpretation of the used Activity association."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="localContribution" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Local Contribution defines a mechanism for defining specific local additions (or contributions) to breakdown elements inherited via the extension Activity Use Kind within the context of the reusing Activity.  Hence, usedActivity relationships of this kind are used in addition to a usedActivity relationship of the kind Extension.  For example, an Activity could be defined as a child of a second Activity which defines an extension relationship to a third Activity adding additional new sub-elements (such as new sub-Activities) to the set of sub-elements the second Activity inherited from the third Activity via the extension relationship."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="localReplacement" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Local Replace defines a mechanism for defining local replacements to specific breakdown elements inherited via the Extension Activity Use Kind in the context of the reusing Activity.  UsedActivity relationships of this kind are used in addition to a usedActivity relationship of the kind Extension.  Instances of this type replace inherited Activity sub-elements with their own sub-elements.  For example, an Activity could be defined as a child of a second Activity which defines an extension relationship to a third Activity replacing the inherited sub-elements (such as its sub-Activities), that the second Activity inherited from the third Activity via the extension relationship, with its own set of sub-elements."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DefaultTaskDefinitionParameter" eSuperTypes="#//MethodContentElement #//WorkDefinitionParameter">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="Default_TaskDefinitionParameter"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Task Definition Parameter is a special Work Definition Parameter that uses Work Product Definitions as well as adds an Optionalilty attribute."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="optionality" ordered="false"
        lowerBound="1" eType="#//OptionalityKind">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute represents if the input or output parameter is optional, i.e. mandatory to provide to the Task Definition or to be produced by the Task Definition respectively."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="paramterType" ordered="false"
        eType="#//WorkProductDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association links zero or one Work Product Definitions instances to a parameter.  Task Definitions can leave the type specification open and not specify a concrete Work Product Definition at all."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="OptionalityKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="This enumeration provides the values for the Task Definition Parameter attribute optionality."/>
    </eAnnotations>
    <eLiterals name="mandatory">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="It is mandatory to provide the Work Product Definition specified in this parameter as input or to provide an instance of the Work Product Definition as output respectively."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="optional" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="It is optional to provide the Work Product Definition specified in this parameter as input or to provide an instance of the Work Product Definition as output respectively."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Step" eSuperTypes="#//Section #//WorkDefinition">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Step is a Section and Work Definition that is used to organize a Task Definition�s Content Description into parts or subunits of work.  Steps inherit the subSection decomposition from Section and can therefore describe sub-Steps nested into Steps.&#xD;&#xA;A Step describes a meaningful and consistent part of the overall work described for a Task Definition.  The collection of Steps defined for a Task Definition represents all the work that should be done to achieve the overall development goal of the Task Definition.  Not all steps are necessarily performed each time a Task is invoked in a Process (see Task Use defined Section 13.6), so they can also be expressed in the form of alternate �flows� of work.  Different ways of achieving the same development goal can then be �assembled� by selecting different combinations of steps when applying the Task Definition in a Process.  Typical kinds of steps a Task Definition author should consider are: Thinking steps: where the individual roles understand the nature of the task, gathers and examines the input artifacts, and formulates the outcome. Performing steps: where the individual roles create or update some artifacts. Reviewing steps: where the individual roles inspects the results against some criteria."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TaskDefinition" eSuperTypes="#//MethodContentElement #//WorkDefinition">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Task Definition is a Method Content Element and a Work Definition that defines work being performed by Roles Definition instances.  A Task is associated to input and output Work Products.  Inputs are differentiated in mandatory versus optional inputs.  The relationships to Work Products via Work Definition Parameters are not instantiatable/variable-like parameters.  They rather express (hyper-)links to the descriptions of the work products types that are related to the Task as inputs and outputs.  In other words, these associations are not intended to be used to capture which concrete instances will be passed when instantiating the method in a project.  All of the Task Definition�s default associations and Parameters can be overridden in an actual process definition.&#xD;&#xA;A Task Definition describes an assignable unit of work.  Every Task Definition is assigned to specific Role Definitions.  The granularity of a Task Definition is generally a few hours to a few days.  It usually affects one or only a small number of work products. A Task Definition is used as an element of defining a process. Tasks Definition are further used for planning and tracking progress; therefore, if they are defined too fine-grained, they will be neglected, and if they are too large, progress would have to be expressed in terms of a Task Definition�s parts (e.g. Steps, which is not recommended).&#xD;&#xA;A Task Definition has a clear purpose in which the performing roles achieve a well defined goal.  It provides complete step-by-step explanations of doing all the work that needs to be done to achieve this goal.  This description is complete, independent of when in a process lifecycle the work would actually be done.  It therefore does not describe when you do what work at what point of time, but describes all the work that gets done throughout the development lifecycle that contributes to the achievement of this goal.  When the Task Definition instance is being applied in a process then this process application (defined as Task Use) provides the information of which pieces of the Task Definition will actually be performed at any particular point in time. This assumes that the Task Definition will be performed in the process over and over again, but each time with a slightly different emphasis on different steps or aspects of the task description. &#xD;&#xA;For example, a Task Definition such as �Develop Use Case Model� describes all the work that needs to be done to develop a complete use case model. This would comprise of the identification and naming of use cases and actors, the writing of a brief description, the modeling of use cases and their relationships in diagrams, the detailed description of a basic flow, the detailed description of alternatives flows, performing of walkthroughs workshops and reviews, etc.  All of these parts contribute to the development goal of developing the use case model, but the parts will be performed at different points in time in a process.  Identification, naming, and brief descriptions would be performed early in a typical development process versus the writing of detailed alternative flows which would be performed much later.  All these parts or steps within the same Task define the �method� of Developing a Use Case Model.  Applying such a method in a lifecycle (i.e. in a process) is defining which steps are done when going from one iteration to the next."/>
    </eAnnotations>
    <eOperations name="step" ordered="false" lowerBound="1" eType="#//Step">
      <eAnnotations source="http://www.eclipse.org/uml2/1.1.0/GenModel">
        <details key="body" value="self.description.section"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="step" upperBound="-1" eType="#//Step"
        volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This derived association is a shortcut for navigation along the association properties self.description.section."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="usedTool" ordered="false"
        upperBound="-1" eType="#//ToolDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Task Definition can recommend a specific set of tools to be used to support the Task."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTaskDefinitionParameter"
        upperBound="-1" eType="#//DefaultTaskDefinitionParameter" containment="true">
      <eAnnotations source="subsets" references="#//WorkDefinition/ownedParameter"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requiredQualification"
        ordered="false" upperBound="-1" eType="#//Qualification"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ToolDefinition" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Tool Definition is a special Method Content Element that can be used to specify a tool's participation in a Task Definition.&#xD;&#xA;A Tool Definition describes the capabilities of a CASE tool, general purpose tool, or any other automation unit that supports the associated instances of Role Definitions in performing the work defined by a Task Definition.  A Tool Definition can represent a resource useful, recommended, or necessary for a task�s completion.  The Task Definition can refer to the associated list of Tool Definitions to clarify their role. "/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="managedWorkProduct" ordered="false"
        upperBound="-1" eType="#//WorkProductDefinition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Qualification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Qualification is a Method Content Element that documents zero or more required qualifications, skills, or competencies for Role Definitions.  In addition to informally describing the qualification using its Content Element documentation properties, Qualification can be further categorized by defining specific Kinds.&#xD;&#xA;A Qualification documents one specific skill or competency that is used to model and represent the qualifications provided by instances of a Role Definition and/or the qualifications required for the performance of a Task.  These qualifications can be used to find and map roles for tasks when assembling method content and assigning organization specific roles to these tasks dynamically.  Qualifications can also be used to find individuals (i.e. people) as instances of the Role Definition instances.  For example, Qualifications of the Kind &quot;Soft Skills&quot; associated to the &quot;System Analyst&quot; Role Definition could be &quot;captures stakeholder needs&quot;, &quot;selects elicitation techniques&quot;, &quot;adapts elicitation techniques&quot;, &quot;negotiates scope&quot;, etc.   &#xD;&#xA;A Role Use can select a sub-set of valid Qualifications for the use of the Role Definitions in the context of a particular Activity.  One can then express that for the Role Use within a particular Activity only the �selects elicitation techniques� Qualification of the �System Analyst� Role Definition is required."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkProductDefinitionRelationship" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Product Definition Relationship expresses a general relationship amongst Work Products Definitions.  Kind class instances shall be used to specify the nature of this relationship.&#xD;&#xA;The Work Product Definition Relationship can be used to express different kinds of relationships amongst Work Product Definition.  Typical Kinds are �composition� expressing that a Work Product Definition instance of an instance is part of another Work Product Definition instance of an instance. For example, an instance of Actor is part of an instance of Use Case Model.  In contrast to composition another Kind could express �aggregation� indicating that a Work Product Definition is used with another Work Product Definition.  For example, a customer design deliverable could be defined as a compilation of different other work product uses that are assemble as a report that is delivered to the customer for review.  A third key Kind is �dependency� indicating that a Work Product Definition impacts another Work Product Definition.  For example, if a use case model Work Product Definition changes the use case realization Work Product Definition needs to be updated with these changes."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" ordered="false"
        lowerBound="1" eType="#//WorkProductDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association links to the exact one source of the Work Product Definition Relationship."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//WorkProductDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association links to one or more targets of the Work Product Definition Relationship."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Category" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Category is a Describable Element used to categorize, i.e. group any number of Describable Elements of any subtype based on user-defined criteria.  Because Categories are Describable Elements themselves they can be used to recursively categorize other Category instances as well.  Categories can also be nested using the subCategory association.&#xD;&#xA;Categories can be used to categorize content based on the user's criteria as well as to define whole tree-structures of nested categories allowing the user to systematically navigate and browse method content and processes based on these categories.  For example, one could create a Category to logically organize content relevant for the user's development organization departments; e.g. a &quot;Testing&quot; category that groups together all Roles, Work Products, Tasks, and Guidance elements relevant to testing.  Another example would be Categories that express licensing levels of the content, grouping freely distributable method content versus content that represents intellectual property and requires a purchased license for use.  Whereas Kinds are limited to one Kind instance per meta-model instance and stored as properties of the Extensible Element, Categories store the relationships to Describable Elements.  Describable Elements can be categorized by as many Categories as needed.  Categories can categorize Categories as well as well as can be hierarchical."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subCategory" ordered="false"
        upperBound="-1" eType="#//Category"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="categorizedElement" ordered="false"
        upperBound="-1" eType="#//DescribableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DefaultTaskDefinitionPerformer" eSuperTypes="#//MethodContentElement #//WorkDefinitionPerformer">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="Default_TaskDefinitionPerformer"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Default Task Definition Performer is a Work Definition Performer that represents a relationship between Task Definition instances and Role Definition instances. An instance of Default Task Definition Performer links one or more Role Definition instances to one Task Definition instance.&#xD;&#xA;The Default Task Definition Performer links Role Definition to Task Definitions indicating that these Role Definition instances participate in the work defined by the Task Definition in one or another way.  The kind of involvement of the Role Definition in the Task Definition needs to be defined by Kind class instances that qualify the Default Task Definition Performer instances.  Typical examples for Kinds of Default Task Definition Performers would be Primary Performer, Additional Performer, Assisting Performer, Supervising Performer, Consulted Performer, etc.  The popular RACI-VS diagram defines another set of commonly used Kinds for the Default Task Definition Performer: Responsible, Accountable, Consulted, Informed, Verifies and Signs."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedRoleDefinition" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//RoleDefinition"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedTaskDefinition" ordered="false"
        lowerBound="1" eType="#//TaskDefinition">
      <eAnnotations source="subsets" references="#//WorkDefinitionPerformer/linkedWorkDefinition"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleDefinition" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Role Definition is a Method Content Element that defines a set of related skills, competencies, and responsibilities.  Roles are used by Task Definitions to define who performs them as well as define a set of Work Product Definitions they are responsible for.&#xD;&#xA;A Role Definition defines a set of related skills, competencies, and responsibilities of an individual or a set of individuals.  Roles are not individuals or resources.  Individual members of the development organization will wear different hats, or perform different roles. The mapping from individual to Role, performed by the project manager when planning and staffing for a project, allows different individuals to act as several different roles, and for a role to be played by several individuals (also refer to Composite Role)."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="providedQualification"
        ordered="false" upperBound="-1" eType="#//Qualification">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Provides a list of Qualifications required for instances of instances of Role Definitions to fulfill."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleDefinitionContext"
        ordered="false" eType="#//TransitionExt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodContentPackage" eSuperTypes="#//Package #//MethodContentPackageableElement #//MethodPluginPackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Method Content Package is a Method Content Packageable Element and Package that contains Method Content Elements only.  Examples for Method Content Element are Work Product Definition, Task Definition, Role Definition, etc.&#xD;&#xA;A key separation of concerns in SPEM 2.0 is the distinction between Method Content and Process.  This separation is enforced by special package types, which do not allow the mixing of method content with processes.  Method Content Elements are organized in Method Content Packages to structure large scales of method content as well as to define a mechanism for reuse.  Method Content Elements from one package can reuse element from other packages by defining an imports dependency (defined in the UML 2 Infrastructure) between them.  For example, a Work Product Definition defined in one package can be used as an input for Task Definitions defined in other packages.  By reusing it from one common place (i.e. the package in which it has been defined) ensures that no redundant definitions of the same elements are required.  Also maintenance of method content is greatly improved as changes can be performed in only one place."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedMethodContentMember"
        ordered="false" upperBound="-1" eType="#//MethodContentPackageableElement"
        containment="true">
      <eAnnotations source="redefines" references="#//Package/packagedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodPluginPackageableElement" abstract="true"
      eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Method Plugin Element is an abstract generalization for Method Content Package and Process Package supporting the redefinition of the packagedElement association of Method Plugin inherited from the UML 2 class.&#xD;&#xA;Method Plugin Packageable Element represents an element that can be packaged in a Method Plugin.  It prevents SPEM 2.0 user from nesting Method Plugins."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessPackage" eSuperTypes="#//Package #//MethodPluginPackageableElement #//ProcessPackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Process Package is a special Package that can only contain Process Elements and UML 2 Diagram Interchange Diagrams.  It redefines the packagedElement and ownedMembers association to only allow elements of these two types.&#xD;&#xA;A process package can only contain Process Elements and Diagrams.  A key separation of concerns in SPEM 2.0 is the distinction between Method Content and Process.  This separation is enforced by special package types, which do not allow the mixing of method content with processes.  Method Content is managed in Method Content Packages."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedProcessMember" ordered="false"
        upperBound="-1" eType="#//ProcessPackageableElement" containment="true">
      <eAnnotations source="redefines" references="#//Package/packagedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CompositeRole" eSuperTypes="#//RoleUse">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Composite Role is a special Role Use that relates to more than one Role Definition.  It represents a grouping of Roles Definition references with the main purpose of simplification, i.e. reducing the number of roles defined in method content for a process.&#xD;&#xA;A Composite Role is a grouping of Role Definitions that can be used in an Activity or Process to reduce the number of Roles.  A typical application would be a process for a small team in which a standard set of roles from the method content would be all performed by one or more resource.  By using Composite Roles the process would suggest a typical clustering of Roles to Resources.  A Composite Role could perform all Tasks Definitions defined for the Roles Definition it refers to."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="aggregatedRole" ordered="false"
        upperBound="-1" eType="#//RoleDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association lists all the Roles Definitions represented by the Composite Role."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleUse" eSuperTypes="#//MethodContentUse">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Role Use is a special Breakdown Element that either represents a performer of an Activity or a participant of the Activity.  If it is a performer the Role Use and Activity need to be related via a Process Performer.  If it is a participant then the Role Use is stored in the nestedBreakdownElement composition of the Activity and might be used by one of the sub-activities as a performer and/or a Process Responsibility Assignment.  Role Uses are only valid within and specific to the context of an Activity and not to be reused across activities.&#xD;&#xA;A Role Use represents an activity specific occurrence of an activity performer or participant.  A Role Use is an Activity specific object and not a general reusable definition of an organizational role. (The meta-model package Method Content defines a concepts call Role Definition for that).  A Role Use represents the occurrence of a real person performing activity-specific work and having activity-specific responsibilities.  A Role Use participant stored with an Activity can be only accessed and reused by the Activity�s sub-Activities and not by any parent or sibling Activities in the Activity breakdown structure.  This scoping of Role Use in the local namespace of Activities allows to model different Performers as well as different Responsibility Assignments for every Activity, which reflects the fact that work product responsibilities and performance of activities might change throughout the development lifecycle.  In other words, Role Use instances with the same name can be created in different Activities, which all have different responsibilities and perform different work.&#xD;&#xA;Many processes do not comprise of Role Definitions and just define the occurrence of a role and imply that all team members know what the Role Use represents (e.g. by just interpreting the Role Use name).  In these situations fitting individuals for the Role Uses are assigned when the process is enacted.  Assigning Role Uses in such a way is also often referred to as �self-organizing� teams in which team members choose by themselves or via their managers which roles they play during development.&#xD;&#xA;A Role Use represents a Role in the context of one specific Activity.  Every breakdown structure can define different relationships of Role Uses to Task Uses and Work Product Uses.  Therefore one role can be represented by many Role Uses each within the context of an Activity with its own set of relationships."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="role" ordered="false" eType="#//RoleDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association represents the reference from the Method Content Use to the method content element it refers to.  Every Role Use can reference only one Role Definition.  However, a Role Definition can be represented by many Role Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="appliedQualification" ordered="false"
        upperBound="-1" eType="#//Qualification"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleUseContext" ordered="false"
        upperBound="-1" eType="#//TransitionExt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TaskUse" eSuperTypes="#//WorkBreakdownElement #//MethodContentUse">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Task Use is a Method Content Use and Work Breakdown Element that represents a proxy for a Task Definition in the context of one specific Activity.  Every breakdown structure can define different relationships of Task Uses to Work Product Uses and Role Uses. Therefore one Task Definition can be represented by many Task Uses each within the context of an Activity with its own set of relationships.&#xD;&#xA;A key difference between Method Content and Process is that a Method Content Element such as Task Definition describes all aspects of doing work defined around this task.  This description is managed in steps, which are modeled as Sections of the Task Definitions� Content Descriptions.  When applying a Task Definition in a Process� Activity with a Task Use a Process Engineer needs to indicate that at that particular point in time in the Process definition for which the Task Use has been created, only a subset of steps shall be performed.  She defines this selection using the selectedSteps association depicted in Figure 59.  If she wants to add steps to a Task Use, she can describe these either pragmatically in the refinedDescription attribute or �properly� create a contributing Task Definition to the Task the Task Use refers to (see Section 14.2 on Contribution).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="selectedStep" ordered="false"
        upperBound="-1" eType="#//Step">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="List the steps that have been selected to be performed for the instance of the Task Use."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="task" ordered="false" eType="#//TaskDefinition">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association represents the reference from the Method Content Use to the Method Content Element it refers to.  Every Task Use can reference only on Task Definition.  However, a Task Definition can be represented by many Task Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedProcessParameter"
        upperBound="-1" eType="#//ProcessParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="usedQualification" ordered="false"
        upperBound="-1" eType="#//Qualification"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TeamProfile" eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Team Profile is a Breakdown Element that groups Role Uses or Composite Roles defining a nested hierarchy of teams and team members.&#xD;&#xA;Work assignments and Work Product responsibilities can be different from Activity to Activity in a development project. Different phases require different staffing profiles, i.e. different skills and resources doing different types of work.  Therefore, a process needs to define such different profiles in a flexible manner.  Whereas Core Method Content defines standard responsibilities and assignments, a process expressed in breakdown structures needs to be able to refine and redefine these throughout its definition.  Role Uses, Composite Roles, as well as Team Profiles provide the data structure necessary to achieve this flexibility and to provide a process user with the capability to define different teams and role relationships for every Activity (including Activities on any nesting-level as well as Iterations or Phases).&#xD;&#xA;Hence, in addition to the work breakdown and work product breakdown structures defined so far, Team Profiles are used to define a third type of breakdown structure: team breakdown structures.  These are created as an Activity specific hierarchy of Team Profiles comprising of Role Uses and Composite Roles.  These structures can be presented as well-known Org-Charts.  The diagram shows three instances of Team Profile forming a hierarchy (the top-level node being just a logical node just grouping all the teams and roles defined for an Activity together).  Every Team Profile instance has a number of Roles associated which will be represented as Role Uses."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superTeam" ordered="false"
        eType="#//TeamProfile" eOpposite="#//TeamProfile/subTeam"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subTeam" ordered="false"
        upperBound="-1" eType="#//TeamProfile" containment="true" eOpposite="#//TeamProfile/superTeam"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="teamRole" ordered="false"
        upperBound="-1" eType="#//RoleUse">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association specifies the roles of team members with Role Uses."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessPerformer" eSuperTypes="#//BreakdownElement #//WorkDefinitionPerformer">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Process Performer is a Breakdown Element and Work Definition Performer that represents a relationship between Activity instances and Role Use instances. An instance of Process Performer links one or more Role Use instances to one Activity. (Modeled as 0..1 Activities because the Process with Methods meta-model package will add an alternative class to Activity.)&#xD;&#xA;The Process Performer links Role Uses to Activities indicating that the Role Use participated in the work defined by the activity in one or another way.  The kind of involvement of the Role Use in the Activity needs to be defined by a Kind class instances that qualifies the Process Performer instances.  Typical examples for Kinds of Process Performers would be Primary Performer, Additional Performer, Assisting Performer, Supervising Performer, Consulted Performer, etc.  The popular RACI-VS diagram defines another set of commonly used Kinds for the Process Performer: Responsible, Accountable, Consulted, Informed, Verifies and Signs.&#xD;&#xA;Process Performer in this meta-model package extends the Process Performer of defined the Process Structure meta-model package with an additional association to Task Use.  Process Performer can be used optionally to indicate performance of an Activity or a Task Use."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedRoleUse" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//RoleUse"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedActivity" ordered="false"
        eType="#//Activity">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Process Performer links to zero or one Activity via this association. The linked Activity property subsets the linked Work Definition property from the Work Definition Performer defined in Core."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//WorkDefinitionPerformer/linkedWorkDefinition"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedTaskUse" ordered="false"
        lowerBound="1" eType="#//TaskUse">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association links exactly one Task Use to a Process Performer."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Activity" eSuperTypes="#//WorkBreakdownElement #//WorkDefinition #//VariabilityElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An Activity is a Work Breakdown Element and Work Definition that defines basic units of work within a Process. It relates to Work Product Use instances via instances of the Process Parameter class and Role Use instances via Process Performer instances.&#xD;&#xA;Activity supports the nesting and logical grouping of related Breakdown Elements forming breakdown structures.  The concrete breakdown structure an Activity defines (i.e. its contained elements) can be reused by another Activity via the used Activity association, which allows the second Activity to inherit its complete sub-structure.&#xD;&#xA;Activity is a concrete Work Definition that represents a general unit of work assignable to specific performers represented by Role Use.  An Activity can rely on inputs and produce outputs represented by Work Product Uses.  Activity also represents a grouping element for other Breakdown Elements such as Activities, Method Content Uses, Milestones, etc.  It is not per-se a �high-level� grouping of only work as in other meta-models, but groups any kind of Breakdown Elements.  For example, one can define valid Activities that group only Work Product Uses without any matching Role Uses or Parameters.  Such a structure expresses the information that the Activity requires work on these Work Products, without specifying how and who providing the flexibility required for modeling partial or Agile processes. Activity instances can inherit, contribute, or replace properties from other reused activities.  The semantics for the three kinds of reuse defined are specified for Activity Use Kind.&#xD;&#xA;Activity in the package Method Plugin inherits from Variability Element to extend Activity with new capabilities for variability. &#xD;&#xA;Activity inherits the semantics of Variability Element which provides key mechanism to enable dynamic modification of Activities in a process from a Method Plugin."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="useKind" ordered="false"
        lowerBound="1" eType="#//ActivityUseKind" defaultValueLiteral="na">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute is set to a value of the enumeration Activity Use Kind other than its default &quot;na&quot; when the Activity instance is associated to another Activity via the useActivity association for reuse. The value of the attribute of the Activity of the to-many end defines the semantics of the association according to the definitions in Activity Use Kind."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedBreakdownElement"
        upperBound="-1" eType="#//BreakdownElement" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association represents breakdown structure nesting.  It defines an n-level hierarchy of Activities grouping together other Breakdown Elements such as other Activities, Milestones, etc."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="usedActivity" ordered="false"
        eType="#//Activity">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association defines a reuse generalization for Activities according to the semantics defined for Activity Use Kind. Activity instances on the to-many end of the association can reuse properties of the Activity instance on the to-one end (base) of the association."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedProcessParameter"
        upperBound="-1" eType="#//ProcessParameter" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The association property subsets the ownedWorkDefinitionParamter of Work Definition."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//WorkDefinition/ownedParameter"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="suppressedBreakdownElement"
        ordered="false" upperBound="-1" eType="#//BreakdownElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The suppressed association allows hiding any Breakdown Element from the interpretation of a process structure.  It is used in combination with the usedActivity association for elements that are inherited by usedActivity.  The reusing activity can define its own local elements that refer to the base activity�s element to denote the suppression (see Activity Use for more details)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="validContext" ordered="false"
        upperBound="-1" eType="#//MethodConfiguration"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defaultContext" ordered="false"
        eType="#//MethodConfiguration"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodConfiguration" eSuperTypes="#//MethodLibraryPackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Method Configuration is a collection of selected Method Plugins, as well as sub-sets of Method Content Packages and Process Packages of respective Method Plugins.  The definition of a configuration can be further refined by subtraction of all Content Elements categorized by a Category associated via the subtracted Category association.&#xD;&#xA;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseConfiguration" ordered="false"
        upperBound="-1" eType="#//MethodConfiguration"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defaultView" ordered="false"
        lowerBound="1" eType="#//Category"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="processView" ordered="false"
        upperBound="-1" eType="#//Category"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="methodPluginSelection"
        ordered="false" lowerBound="1" upperBound="-1" eType="#//MethodPlugin" volatile="true"
        transient="true" derived="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="substractedCategory" ordered="false"
        upperBound="-1" eType="#//Category"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="processPackageSelection"
        ordered="false" upperBound="-1" eType="#//ProcessPackage"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="contentPackageSelection"
        ordered="false" upperBound="-1" eType="#//MethodContentPackage"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodLibraryPackageableElement" abstract="true"
      eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Method Library Element is an abstract generalization for Method Plugin and Method Configuration supporting the redefinition of the packagedElement association of Method Library inherited from the UML 2 class.&#xD;&#xA;Method Library Packageable Element represents an element that can be packaged in a Method Library.  It prevents SPEM 2.0 user from nesting Method Libraries."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodPlugin" eSuperTypes="#//Package #//MethodLibraryPackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Method Plugin is a Package that represents a physical container for Content and Process Packages.  It defines a granularity level for the modularization and organization of method content and processes.  A Method Plugin can extend many other Method Plugins and it can be extended by many Method Plugins.  It can also be used stand-alone, i.e. with no Extension relationship to other plug-ins."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="packagedElement" ordered="false"
          upperBound="-1" eType="#//MethodPluginPackageableElement" containment="true">
        <eAnnotations source="redefines" references="#//Package/packagedElement"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="userChangeable" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="basePlugin" ordered="false"
        upperBound="-1" eType="#//MethodPlugin"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedMethodContentPackage"
        ordered="false" upperBound="-1" eType="#//MethodContentPackage" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="subsets" references="#//MethodPlugin/%duplicates%/packagedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedProcessPackage" ordered="false"
        upperBound="-1" eType="#//ProcessPackage" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="subsets" references="#//MethodPlugin/%duplicates%/packagedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MethodLibrary" eSuperTypes="#//Package">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Method Library is a physical container for Method Plugins and Method Configuration definitions.  All Method Elements are stored in a Method Library."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="packagedElement" ordered="false"
          upperBound="-1" eType="#//MethodLibraryPackageableElement" containment="true">
        <eAnnotations source="redefines" references="#//Package/packagedElement"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="predefinedConfiguration"
        ordered="false" upperBound="-1" eType="#//MethodConfiguration" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="subsets" references="#//MethodLibrary/%duplicates%/packagedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedMethodPlugin" ordered="false"
        upperBound="-1" eType="#//MethodPlugin" volatile="true" transient="true" derived="true">
      <eAnnotations source="subsets" references="#//MethodLibrary/%duplicates%/packagedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessComponent" eSuperTypes="#//ProcessPackage">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Process Component is a special Process Package that applies the principles of encapsulation.  A Process Component contains exactly one Process and defines a set of Work Product Ports that define the inputs and outputs for a Process Component.  There might be many components defining the same Work Product Ports, but using different techniques (i.e. Process) to achieve similar outputs for similar inputs.  Whereas the Work Product Port represents the component specifications (black box view on the component), good candidates for component realizations can be found in Capability Patterns (white box descriptions for the component).&#xD;&#xA;SPEM 2.0 supports replaceable and reusable Process Components realizing the principles of encapsulation. Certain situations in a software development project might require that concrete realizations of parts of the process remain undecided or will be decided by the executing team itself (e.g. in outsourcing situations).  Process components support an assembly mechanism that provides that is based on the &quot;black box&quot; principle. At any point during a project the component &quot;realization&quot; detailing the work can be added to the process.  The component approach also allows that different styles or techniques of doing work can be replaced with one another.  For example, a software code output of a component could be produced with a model-driven development or a code-centric technique.  The component concept encapsulates the actual work and lets the development team choose the appropriate technique and fill the component's realization with their choice of Activities that produce the required outputs.&#xD;&#xA;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedPort" ordered="false"
        upperBound="-1" eType="#//WorkProductPort" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="process" ordered="false"
        lowerBound="1" eType="#//Activity" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkProductPort" eSuperTypes="#//ProcessElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Product Port defines the work products input and outputs for a Process Component.  It is defined based on exactly one type of Work Product and defines for exactly one Process Component if this Work Product type is to be expected as a required (input) or supplied (output) by the Process Component.  It also specifies if this input or output is optional or not. "/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="portKind" ordered="false"
        lowerBound="1" eType="#//ParameterDirectionKind" defaultValueLiteral="inout">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute defines if the port represents and input or output Work Product."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOptional" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This attribute specifies if the port represents a mandatory or optional Work Product input or output."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="portType" ordered="false"
        eType="#//WorkProductDefinition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessComponentUse" eSuperTypes="#//MethodContentUse">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Process Component Use represents a Process Component application in a Process, i.e. the breakdown structure defining the Process.  The Process Component Use is used to encapsulate the details of the component in a breakdown structure and to provide its own set of relationships such as it own predecessors and successors."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="usedPort" ordered="false"
        upperBound="-1" eType="#//WorkProductPort" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association links the Process Component Use to used Work Product Ports of the Process Component."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="processComponent" ordered="false"
        lowerBound="1" eType="#//ProcessComponent"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="WorkProductPortConnector" eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Work Product Port Connector is used to connect Work Product Ports for assembling Process Components."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connectedPort" ordered="false"
        upperBound="-1" eType="#//WorkProductPort">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This association connects many Work Product Ports with many other Work Product Ports."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DefaultResponsibilityAssignment" eSuperTypes="#//MethodContentElement">
    <eAnnotations source="http://www.eclipse.org/uml2/2.0.0/UML">
      <details key="originalName" value="Default_ResponsibilityAssignment"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Default Responsibility Assignment is a Method Content Element that represents a relationship between instances of Role Definition and Work Product Definition.  An instance of the Default Responsibility Assignment links one or more Role Definition instances to exactly one Work Product Definition.&#xD;&#xA;The Process Responsibility Assignment links Role Definitions to Work Product Definitions indicating that the Role Definition has a responsibility relationship with the Work Product Definition.  The Kind of responsibility of the Role Definition for the Work Product Definition needs to be defined by Kind class instances that qualify the Default Responsibility Assignment. The popular RACI-VS diagram defines a set of commonly used Kinds which cannot only be applied for the Default Task Definition Performer, but also often used for work product responsibility: Responsible, Accountable, Consulted, Informed, Verifies and Signs."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedRoleDefinition" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//RoleDefinition"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedWorkproductDefinition"
        ordered="false" lowerBound="1" eType="#//WorkProductDefinition"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defaultResponsibilityContext"
        ordered="false" upperBound="-1" eType="#//StateExt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ProcessResponsibilityAssignment" eSuperTypes="#//BreakdownElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Process Responsibility Assignment is a Breakdown Element that represents a relationship between instances of Role Use and Work Product Use.  An instance of the Process Responsibility Assignment links one or more Role Use instances to exactly one Work Product Use.&#xD;&#xA;The Process Responsibility Assignment links Role Uses to Work Product Uses indicating that the Role Use has a responsibility relationship with the Work Product Use.  The Kind of responsibility of the Role Use for the Work Product Use needs to be defined by Kind class instances that qualify the Process Responsibility Assignment. The popular RACI-VS diagram defines a set of commonly used Kinds which cannot only be applied for the Process Performer, but also often used for work product responsibility: Responsible, Accountable, Consulted, Informed, Verifies and Signs.&#xD;&#xA;Note, that for many processes the Process Performer and Process Responsibility represent two quite different sets of information as a Role Use can be involved in an Activity that modifies a work product without being responsible for the Work Product itself and vice versa: A Role Use can be responsible for a Work Product Use without participating an all the Activities that modify it.  Other processes might chose to only use one of these relationships.  For example, there are processes for self-organizing teams that actually do not define detailed Activities describing which Role Use performs which work.  These approaches might just utilize the Process Responsibility Assignment to express that a Role Use has a certain responsibility, but that the process does not prescribe how that responsibility is achieved.  In such a case the Kinds defined might express work product states such as �detailed�, �implemented�, �documented�, �reviewed� and so on."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedWorkProductUse" ordered="false"
        lowerBound="1" eType="#//WorkProductUse">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Process Responsibility Assignment links to exactly one Work Product Use."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedRoleUse" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//RoleUse">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Process Responsibility Assignment links to one or more Role Use."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="processResponsibilityContext"
        ordered="false" upperBound="-1" eType="#//StateExt"/>
  </eClassifiers>
</ecore:EPackage>
